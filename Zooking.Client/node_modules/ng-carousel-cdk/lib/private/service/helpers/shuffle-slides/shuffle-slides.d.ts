import { CarouselSlide } from '../../../models/carousel-slide';
import { IdGenerator } from '../../../models/id-generator';
import { CopySlidesResult } from './models/copy-slides-result';
import { ShuffleSlidesResult } from './models/shuffle-slides-result';
/**
 * Justifies existing slides in viewport by either
 * - Move slide from one side to another
 * - Copy slide from one side to another
 * - Create slide on one side
 *
 * Task of this function is to leave no empty spaces in viewport.
 *
 * **BE ADVICED**, that inViewport flag should be calculated for each slide
 * that should not be moved beforehand.
 */
export declare function shuffleSlides(slides: CarouselSlide[], offset: number, slideWidth: number, viewportWidth: number, items: any[], shouldLoop: boolean, threshold?: number, idGenerator?: IdGenerator): ShuffleSlidesResult;
/**
 * Moves, copies or creates slides to the right side in order to fill
 * desired `quantity`.
 *
 * Quantity means of how much new slides will be added.
 * There are two options of how we could fill missing slides.
 * Imagine next slides row mapped to their item index:
 * [3, 4, 5, 0, 1, 2, 3, 4, 5] and lets take `quantity` = 4.
 * We can't just start to move/copy slides from the right part,
 * because we can't break sequence (meaning if we'll copy slide `5`
 * on the right to slide `3` on the left, they won't stack).
 * Slide `3` on the left awaits slide with item index `2` to be put
 * near him, so we should create some slides in between. This action
 * is named `Option FILL GAP`.
 *
 * `Option FILL GAP`:
 * How much slides are in between item index `5` and item index `3`?
 * Answer is 3: [**5**, 0, 1, 2, **3**]. So let's fill those 3 slides
 * and subtract their length from `quantity`.
 * Now we have row [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] and `quantity`
 * equals 1. Now we can start copy/move slides from the right part.
 * This action is called `Option COPY`
 *
 * `Option COPY`:
 * When meddling with slides from the other side, we have two options
 * of what to do with them: either copy or move. Slide can be moved
 * when it is not `inViewport`, meaning it has corresponding option
 * flag. Otherwise it should be copied.
 * In our example we should move one slide from the right part, since
 * `quantity` after `Option FILL` equals 1. Lets imagine that slide
 * wasn't in viewport and now our slide row has
 * [5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4], voila!
 */
export declare function moveOrCopySlidesToEnd(slides: CarouselSlide[], offset: number, quantity: number, slideWidth: number, items: any[], idGenerator?: IdGenerator): CopySlidesResult;
/**
 * Moves, copies or creates slides to the left side in order to fill
 * desired `quantity`.
 *
 * Quantity means of how much new slides will be added.
 * There are two options of how we could fill missing slides.
 * Imagine next slides row mapped to their item index:
 * [0, 1, 2, 3, 4, 5, 0, 1, 2, 3] and lets take `quantity` = 4.
 * We can't just start to move/copy slides from the left part,
 * because we can't break sequence (meaning if we'll copy slide `0`
 * on the right to slide `3` on the right, they won't stack).
 * Slide `3` on the right side awaits slide with item index `2` to be
 * put near him, so we should create some slides in between. This
 * action is named `Option FILL GAP`.
 *
 * `Option FILL GAP`:
 * How much slides are in between item index `0` and item index `3`?
 * Answer is 2: [**3**, 4, 5, **0**]. So let's fill these 2 slides
 * and subtract their length from `quantity`.
 * Now we have row [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5] and `quantity`
 * equals 2. Now we can start copy/move slides from the left part.
 * This action is called `Option COPY`
 *
 * `Option COPY`:
 * When meddling with slides from the other side, we have two options
 * of what to do with them: either copy or move. Slide can be moved
 * when it is not `inViewport`, meaning it has corresponding option
 * flag. Otherwise it should be copied.
 * In our example we should move two slides from the left part, since
 * `quantity` after `Option FILL` equals 2. Lets imagine that slides
 * weren't in viewport and now our row has
 * [2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1], voila!
 */
export declare function moveOrCopySlidesToStart(slides: CarouselSlide[], offset: number, quantity: number, slideWidth: number, items: any[], idGenerator?: IdGenerator): CopySlidesResult;
