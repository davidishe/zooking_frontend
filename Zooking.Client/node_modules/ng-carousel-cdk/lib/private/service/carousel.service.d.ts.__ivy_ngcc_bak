import { AnimationBuilder } from '@angular/animations';
import { OnDestroy, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { CarouselConfig } from '../../carousel-config';
import { AutoplaySuspender } from '../models/autoplay-suspender';
import { CarouselState } from '../models/carousel-state';
import { IdGenerator } from '../models/id-generator';
export declare class CarouselService implements OnDestroy {
    private animationBuilder;
    private slideIdGenerator;
    private platformId;
    private readonly carouselState$;
    /** Describes constant entities for procedures */
    private readonly procedureEnvironment;
    constructor(animationBuilder: AnimationBuilder, slideIdGenerator: IdGenerator, platformId: Object);
    ngOnDestroy(): void;
    carouselStateChanges(): Observable<CarouselState>;
    setItemIndex(newItemIndex: number): void;
    prev(): void;
    /**
     * @param omitAutoplayReset whether autoplay timer should not be resetted
     */
    next(omitAutoplayReset?: boolean): void;
    recalculate(): void;
    /** Update state to announce that drag sequence just started */
    dragStart(): void;
    /**
     * Update state to announce that drag sequence just ended
     * and perform necessary cleanups
     */
    dragEnd(passedDistance: number): void;
    /** Process single drag tick with given from and to coordinates */
    drag(fromX: number, toX: number): void;
    setSlideTemplate(newTemplateRef: TemplateRef<any> | null): void;
    disableAutoplay(suspender: AutoplaySuspender): void;
    /**
     * Starts new autoplay timer
     */
    enableAutoplay(suspender?: AutoplaySuspender): void;
    setContainers(widthContainer: HTMLElement, animatableContainer: HTMLElement): void;
    setConfig(newConfig: CarouselConfig): void;
    private cleanup;
    /**
     * Applies specified procedure to carousel state
     */
    private apply;
}
