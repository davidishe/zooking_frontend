import { CdkTrapFocus, InteractivityChecker } from '@angular/cdk/a11y';
import { AfterViewInit, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class FocusBlockDirective implements OnChanges, AfterViewInit, OnDestroy {
    private elementRef;
    private interactivityChecker;
    untabbable: boolean;
    untabbableFocusTrapRef: CdkTrapFocus;
    /** Whether focus inside carousel */
    untabbableFocused: boolean;
    private readonly lastTabindexValueMap;
    private viewInitiated;
    private mutationObserver;
    constructor(elementRef: ElementRef, interactivityChecker: InteractivityChecker);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private blockTabindex;
    private unblockTabindex;
    private blockElement;
    private unblockElement;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FocusBlockDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FocusBlockDirective, "[untabbable]", never, { "untabbable": "untabbable"; "untabbableFocused": "untabbableFocused"; "untabbableFocusTrapRef": "untabbableFocusTrapRef"; }, {}, never>;
}

//# sourceMappingURL=untabbable.directive.d.ts.map