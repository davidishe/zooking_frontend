import { ChangeDetectionStrategy, Component, ContentChild, Input, Output, ViewEncapsulation } from '@angular/core';
import { map } from 'rxjs/operators';
import { CarouselConfig } from './carousel-config';
import { CarouselSlideDirective } from './carousel-slide.directive';
import { IdGenerator } from './private/models/id-generator';
import { CarouselService } from './private/service/carousel.service';
import { ANIMATION_ID_GENERATOR, SLIDE_ID_GENERATOR } from './private/tokens';
export function idGeneratorFactory() {
    return new IdGenerator();
}
/**
 * Defines carousel API to work with
 */
export class CarouselComponent {
    constructor(carousel) {
        this.carousel = carousel;
        this.itemIndexChange = this.carousel.carouselStateChanges()
            .pipe(map((state) => state.activeItemIndex));
    }
    set slideRef(newSlideRef) {
        this.carousel.setSlideTemplate(newSlideRef
            ? newSlideRef.templateRef
            : null);
    }
    set config(newConfig) {
        newConfig = new CarouselConfig(newConfig);
        this.carousel.setConfig(newConfig);
    }
    next() {
        this.carousel.next();
    }
    prev() {
        this.carousel.prev();
    }
    setIndex(newIndex) {
        this.carousel.setItemIndex(newIndex);
    }
    /**
     * Programmaticaly recalculates carousel position in case of
     * container size changes or other size interactions
     */
    recalculate() {
        this.carousel.recalculate();
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-carousel',
                template: "<carousel-engine class=\"carousel-engine\"></carousel-engine>\n",
                providers: [
                    CarouselService,
                    {
                        provide: SLIDE_ID_GENERATOR,
                        useFactory: idGeneratorFactory,
                    },
                    {
                        provide: ANIMATION_ID_GENERATOR,
                        useFactory: idGeneratorFactory,
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                exportAs: 'ngCarousel',
                styles: [".carousel-engine{display:block;overflow:hidden;width:100%}"]
            },] }
];
CarouselComponent.ctorParameters = () => [
    { type: CarouselService }
];
CarouselComponent.propDecorators = {
    slideRef: [{ type: ContentChild, args: [CarouselSlideDirective,] }],
    config: [{ type: Input }],
    itemIndexChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY2Fyb3VzZWwvc3JjL2xpYi9jYXJvdXNlbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDckUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFOUUsTUFBTSxVQUFVLGtCQUFrQjtJQUM5QixPQUFPLElBQUksV0FBVyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQXFCRDs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFtQjFCLFlBQ1ksUUFBeUI7UUFBekIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFOM0Isb0JBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFO2FBQzNELElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQ3ZELENBQUM7SUFLTixDQUFDO0lBcEJELElBQTBDLFFBQVEsQ0FBQyxXQUFtQztRQUNsRixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFdBQVc7WUFDdEMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXO1lBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQ1QsQ0FBQztJQUNOLENBQUM7SUFFRCxJQUFhLE1BQU0sQ0FBQyxTQUF5QjtRQUN6QyxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQVlELElBQUk7UUFDQSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQWdCO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7WUFoRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxhQUFhO2dCQUN2QiwyRUFBc0M7Z0JBRXRDLFNBQVMsRUFBRTtvQkFDUCxlQUFlO29CQUNmO3dCQUNJLE9BQU8sRUFBRSxrQkFBa0I7d0JBQzNCLFVBQVUsRUFBRSxrQkFBa0I7cUJBQ2pDO29CQUNEO3dCQUNJLE9BQU8sRUFBRSxzQkFBc0I7d0JBQy9CLFVBQVUsRUFBRSxrQkFBa0I7cUJBQ2pDO2lCQUNKO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsUUFBUSxFQUFFLFlBQVk7O2FBQ3pCOzs7WUF6QlEsZUFBZTs7O3VCQStCbkIsWUFBWSxTQUFDLHNCQUFzQjtxQkFPbkMsS0FBSzs4QkFLTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBDYXJvdXNlbENvbmZpZyB9IGZyb20gJy4vY2Fyb3VzZWwtY29uZmlnJztcbmltcG9ydCB7IENhcm91c2VsU2xpZGVEaXJlY3RpdmUgfSBmcm9tICcuL2Nhcm91c2VsLXNsaWRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDYXJvdXNlbFN0YXRlIH0gZnJvbSAnLi9wcml2YXRlL21vZGVscy9jYXJvdXNlbC1zdGF0ZSc7XG5pbXBvcnQgeyBJZEdlbmVyYXRvciB9IGZyb20gJy4vcHJpdmF0ZS9tb2RlbHMvaWQtZ2VuZXJhdG9yJztcbmltcG9ydCB7IENhcm91c2VsU2VydmljZSB9IGZyb20gJy4vcHJpdmF0ZS9zZXJ2aWNlL2Nhcm91c2VsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQU5JTUFUSU9OX0lEX0dFTkVSQVRPUiwgU0xJREVfSURfR0VORVJBVE9SIH0gZnJvbSAnLi9wcml2YXRlL3Rva2Vucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpZEdlbmVyYXRvckZhY3RvcnkoKTogSWRHZW5lcmF0b3Ige1xuICAgIHJldHVybiBuZXcgSWRHZW5lcmF0b3IoKTtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZy1jYXJvdXNlbCcsXG4gICAgdGVtcGxhdGVVcmw6ICdjYXJvdXNlbC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJ2Nhcm91c2VsLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIENhcm91c2VsU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogU0xJREVfSURfR0VORVJBVE9SLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogaWRHZW5lcmF0b3JGYWN0b3J5LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBBTklNQVRJT05fSURfR0VORVJBVE9SLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogaWRHZW5lcmF0b3JGYWN0b3J5LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBleHBvcnRBczogJ25nQ2Fyb3VzZWwnLFxufSlcbi8qKlxuICogRGVmaW5lcyBjYXJvdXNlbCBBUEkgdG8gd29yayB3aXRoXG4gKi9cbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbXBvbmVudCB7XG5cbiAgICBAQ29udGVudENoaWxkKENhcm91c2VsU2xpZGVEaXJlY3RpdmUpIHNldCBzbGlkZVJlZihuZXdTbGlkZVJlZjogQ2Fyb3VzZWxTbGlkZURpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLmNhcm91c2VsLnNldFNsaWRlVGVtcGxhdGUobmV3U2xpZGVSZWZcbiAgICAgICAgICAgID8gbmV3U2xpZGVSZWYudGVtcGxhdGVSZWZcbiAgICAgICAgICAgIDogbnVsbFxuICAgICAgICApO1xuICAgIH1cblxuICAgIEBJbnB1dCgpIHNldCBjb25maWcobmV3Q29uZmlnOiBDYXJvdXNlbENvbmZpZykge1xuICAgICAgICBuZXdDb25maWcgPSBuZXcgQ2Fyb3VzZWxDb25maWcobmV3Q29uZmlnKTtcbiAgICAgICAgdGhpcy5jYXJvdXNlbC5zZXRDb25maWcobmV3Q29uZmlnKTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KCkgaXRlbUluZGV4Q2hhbmdlID0gdGhpcy5jYXJvdXNlbC5jYXJvdXNlbFN0YXRlQ2hhbmdlcygpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgICAgbWFwKChzdGF0ZTogQ2Fyb3VzZWxTdGF0ZSkgPT4gc3RhdGUuYWN0aXZlSXRlbUluZGV4KSxcbiAgICAgICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNhcm91c2VsOiBDYXJvdXNlbFNlcnZpY2UsXG4gICAgKSB7XG4gICAgfVxuXG4gICAgbmV4dCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYXJvdXNlbC5uZXh0KCk7XG4gICAgfVxuXG4gICAgcHJldigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jYXJvdXNlbC5wcmV2KCk7XG4gICAgfVxuXG4gICAgc2V0SW5kZXgobmV3SW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmNhcm91c2VsLnNldEl0ZW1JbmRleChuZXdJbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZ3JhbW1hdGljYWx5IHJlY2FsY3VsYXRlcyBjYXJvdXNlbCBwb3NpdGlvbiBpbiBjYXNlIG9mXG4gICAgICogY29udGFpbmVyIHNpemUgY2hhbmdlcyBvciBvdGhlciBzaXplIGludGVyYWN0aW9uc1xuICAgICAqL1xuICAgIHJlY2FsY3VsYXRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhcm91c2VsLnJlY2FsY3VsYXRlKCk7XG4gICAgfVxuXG59XG4iXX0=