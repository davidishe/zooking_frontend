import { CarouselWidthMode } from './carousel-width-mode';
import { CarouselAlignMode } from './carousel-align-mode';
export class CarouselConfig {
    constructor(config) {
        /**
         * Array of data to display
         */
        this.items = [];
        /**
         * Describes how carousel calculates its content width.
         * Consult with corresponding enum to see what options
         * are available.
         */
        this.widthMode = CarouselWidthMode.PERCENT;
        /**
         * Slide width. It could be pixels or percents, based on mode
         * configuration.
         */
        this.slideWidth = 100;
        /**
         * Describes how slides should be positioned relative to
         * carousel viewport
         */
        this.alignMode = CarouselAlignMode.CENTER;
        /**
         * Whether autoplay is enabled
         */
        this.autoplayEnabled = true;
        /**
         * Time in ms of how long carousel would wait until automatic
         * slide increment. Respects `autoplayEnabled` value.
         */
        this.autoplayDelay = 6000;
        /**
         * Whether mouse drag or gesture panning enabled
         */
        this.dragEnabled = true;
        /**
         * Whether carousel should start from beginning after last
         * slide
         */
        this.shouldLoop = true;
        /**
         * Time in ms of how long transition between slides would last
         */
        this.transitionDuration = 280;
        /**
         * Whether carousel should automatically recalculate on window resize.
         * This option is recommended when using pixel width mode or left
         * alignment.
         */
        this.shouldRecalculateOnResize = true;
        /**
         * Value in current width mode units which are virtally added to both sides
         * of viewport. Slides within this virtual zone should always be presented
         * whether loop mode is on.
         */
        this.threshold = 5;
        // @TODO nullish coalescing here
        this.items = config && config.items || [];
        this.widthMode = config && config.widthMode || CarouselWidthMode.PERCENT;
        this.alignMode = config && config.alignMode || CarouselAlignMode.CENTER;
        this.slideWidth = config && typeof config.slideWidth === 'number'
            ? config.slideWidth
            : 100;
        this.autoplayEnabled = config && typeof config.autoplayEnabled === 'boolean'
            ? config.autoplayEnabled
            : true;
        this.autoplayDelay = config && typeof config.autoplayDelay === 'number'
            ? config.autoplayDelay
            : 6000;
        this.dragEnabled = config && typeof config.dragEnabled === 'boolean'
            ? config.dragEnabled
            : true;
        this.shouldLoop = config && typeof config.shouldLoop === 'boolean'
            ? config.shouldLoop
            : true;
        this.transitionDuration = config && typeof config.transitionDuration === 'number'
            ? config.transitionDuration
            : 600;
        this.shouldRecalculateOnResize = config && typeof config.shouldRecalculateOnResize === 'boolean'
            ? config.shouldRecalculateOnResize
            : true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY2Fyb3VzZWwvc3JjL2xpYi9jYXJvdXNlbC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGNBQWM7SUF3RHZCLFlBQVksTUFBdUI7UUF2RG5DOztXQUVHO1FBQ0gsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUNuQjs7OztXQUlHO1FBQ0gsY0FBUyxHQUF1QixpQkFBaUIsQ0FBQyxPQUFPLENBQUM7UUFDMUQ7OztXQUdHO1FBQ0gsZUFBVSxHQUFLLEdBQUcsQ0FBQztRQUNuQjs7O1dBR0c7UUFDSCxjQUFTLEdBQXVCLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztRQUN6RDs7V0FFRztRQUNILG9CQUFlLEdBQUssSUFBSSxDQUFDO1FBQ3pCOzs7V0FHRztRQUNILGtCQUFhLEdBQUssSUFBSSxDQUFDO1FBQ3ZCOztXQUVHO1FBQ0gsZ0JBQVcsR0FBSyxJQUFJLENBQUM7UUFDckI7OztXQUdHO1FBQ0gsZUFBVSxHQUFLLElBQUksQ0FBQztRQUNwQjs7V0FFRztRQUNILHVCQUFrQixHQUFLLEdBQUcsQ0FBQztRQUMzQjs7OztXQUlHO1FBQ0gsOEJBQXlCLEdBQUssSUFBSSxDQUFDO1FBQ25DOzs7O1dBSUc7UUFDSCxjQUFTLEdBQUssQ0FBQyxDQUFDO1FBR1osZ0NBQWdDO1FBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksaUJBQWlCLENBQUMsT0FBTyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxJQUFJLE9BQU8sTUFBTSxDQUFDLFVBQVUsS0FBSyxRQUFRO1lBQzdELENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUNuQixDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ1YsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLElBQUksT0FBTyxNQUFNLENBQUMsZUFBZSxLQUFLLFNBQVM7WUFDeEUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxlQUFlO1lBQ3hCLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDWCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sSUFBSSxPQUFPLE1BQU0sQ0FBQyxhQUFhLEtBQUssUUFBUTtZQUNuRSxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWE7WUFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNYLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxJQUFJLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxTQUFTO1lBQ2hFLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVztZQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLElBQUksT0FBTyxNQUFNLENBQUMsVUFBVSxLQUFLLFNBQVM7WUFDOUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVO1lBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDWCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxJQUFJLE9BQU8sTUFBTSxDQUFDLGtCQUFrQixLQUFLLFFBQVE7WUFDN0UsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0I7WUFDM0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNWLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxNQUFNLElBQUksT0FBTyxNQUFNLENBQUMseUJBQXlCLEtBQUssU0FBUztZQUM1RixDQUFDLENBQUMsTUFBTSxDQUFDLHlCQUF5QjtZQUNsQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2YsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2Fyb3VzZWxXaWR0aE1vZGUgfSBmcm9tICcuL2Nhcm91c2VsLXdpZHRoLW1vZGUnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxBbGlnbk1vZGUgfSBmcm9tICcuL2Nhcm91c2VsLWFsaWduLW1vZGUnO1xuXG5leHBvcnQgY2xhc3MgQ2Fyb3VzZWxDb25maWcge1xuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIGRhdGEgdG8gZGlzcGxheVxuICAgICAqL1xuICAgIGl0ZW1zPzogYW55W10gPSBbXTtcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgaG93IGNhcm91c2VsIGNhbGN1bGF0ZXMgaXRzIGNvbnRlbnQgd2lkdGguXG4gICAgICogQ29uc3VsdCB3aXRoIGNvcnJlc3BvbmRpbmcgZW51bSB0byBzZWUgd2hhdCBvcHRpb25zXG4gICAgICogYXJlIGF2YWlsYWJsZS5cbiAgICAgKi9cbiAgICB3aWR0aE1vZGU/OiBDYXJvdXNlbFdpZHRoTW9kZSA9IENhcm91c2VsV2lkdGhNb2RlLlBFUkNFTlQ7XG4gICAgLyoqXG4gICAgICogU2xpZGUgd2lkdGguIEl0IGNvdWxkIGJlIHBpeGVscyBvciBwZXJjZW50cywgYmFzZWQgb24gbW9kZVxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgc2xpZGVXaWR0aCA/ID0gMTAwO1xuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyBob3cgc2xpZGVzIHNob3VsZCBiZSBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvXG4gICAgICogY2Fyb3VzZWwgdmlld3BvcnRcbiAgICAgKi9cbiAgICBhbGlnbk1vZGU/OiBDYXJvdXNlbEFsaWduTW9kZSA9IENhcm91c2VsQWxpZ25Nb2RlLkNFTlRFUjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGF1dG9wbGF5IGlzIGVuYWJsZWRcbiAgICAgKi9cbiAgICBhdXRvcGxheUVuYWJsZWQgPyA9IHRydWU7XG4gICAgLyoqXG4gICAgICogVGltZSBpbiBtcyBvZiBob3cgbG9uZyBjYXJvdXNlbCB3b3VsZCB3YWl0IHVudGlsIGF1dG9tYXRpY1xuICAgICAqIHNsaWRlIGluY3JlbWVudC4gUmVzcGVjdHMgYGF1dG9wbGF5RW5hYmxlZGAgdmFsdWUuXG4gICAgICovXG4gICAgYXV0b3BsYXlEZWxheSA/ID0gNjAwMDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG1vdXNlIGRyYWcgb3IgZ2VzdHVyZSBwYW5uaW5nIGVuYWJsZWRcbiAgICAgKi9cbiAgICBkcmFnRW5hYmxlZCA/ID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGNhcm91c2VsIHNob3VsZCBzdGFydCBmcm9tIGJlZ2lubmluZyBhZnRlciBsYXN0XG4gICAgICogc2xpZGVcbiAgICAgKi9cbiAgICBzaG91bGRMb29wID8gPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRpbWUgaW4gbXMgb2YgaG93IGxvbmcgdHJhbnNpdGlvbiBiZXR3ZWVuIHNsaWRlcyB3b3VsZCBsYXN0XG4gICAgICovXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID8gPSAyODA7XG4gICAgLyoqXG4gICAgICogV2hldGhlciBjYXJvdXNlbCBzaG91bGQgYXV0b21hdGljYWxseSByZWNhbGN1bGF0ZSBvbiB3aW5kb3cgcmVzaXplLlxuICAgICAqIFRoaXMgb3B0aW9uIGlzIHJlY29tbWVuZGVkIHdoZW4gdXNpbmcgcGl4ZWwgd2lkdGggbW9kZSBvciBsZWZ0XG4gICAgICogYWxpZ25tZW50LlxuICAgICAqL1xuICAgIHNob3VsZFJlY2FsY3VsYXRlT25SZXNpemUgPyA9IHRydWU7XG4gICAgLyoqXG4gICAgICogVmFsdWUgaW4gY3VycmVudCB3aWR0aCBtb2RlIHVuaXRzIHdoaWNoIGFyZSB2aXJ0YWxseSBhZGRlZCB0byBib3RoIHNpZGVzXG4gICAgICogb2Ygdmlld3BvcnQuIFNsaWRlcyB3aXRoaW4gdGhpcyB2aXJ0dWFsIHpvbmUgc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50ZWRcbiAgICAgKiB3aGV0aGVyIGxvb3AgbW9kZSBpcyBvbi5cbiAgICAgKi9cbiAgICB0aHJlc2hvbGQgPyA9IDU7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc/OiBDYXJvdXNlbENvbmZpZykge1xuICAgICAgICAvLyBAVE9ETyBudWxsaXNoIGNvYWxlc2NpbmcgaGVyZVxuICAgICAgICB0aGlzLml0ZW1zID0gY29uZmlnICYmIGNvbmZpZy5pdGVtcyB8fCBbXTtcbiAgICAgICAgdGhpcy53aWR0aE1vZGUgPSBjb25maWcgJiYgY29uZmlnLndpZHRoTW9kZSB8fCBDYXJvdXNlbFdpZHRoTW9kZS5QRVJDRU5UO1xuICAgICAgICB0aGlzLmFsaWduTW9kZSA9IGNvbmZpZyAmJiBjb25maWcuYWxpZ25Nb2RlIHx8IENhcm91c2VsQWxpZ25Nb2RlLkNFTlRFUjtcbiAgICAgICAgdGhpcy5zbGlkZVdpZHRoID0gY29uZmlnICYmIHR5cGVvZiBjb25maWcuc2xpZGVXaWR0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gY29uZmlnLnNsaWRlV2lkdGhcbiAgICAgICAgICAgIDogMTAwO1xuICAgICAgICB0aGlzLmF1dG9wbGF5RW5hYmxlZCA9IGNvbmZpZyAmJiB0eXBlb2YgY29uZmlnLmF1dG9wbGF5RW5hYmxlZCA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IGNvbmZpZy5hdXRvcGxheUVuYWJsZWRcbiAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgdGhpcy5hdXRvcGxheURlbGF5ID0gY29uZmlnICYmIHR5cGVvZiBjb25maWcuYXV0b3BsYXlEZWxheSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gY29uZmlnLmF1dG9wbGF5RGVsYXlcbiAgICAgICAgICAgIDogNjAwMDtcbiAgICAgICAgdGhpcy5kcmFnRW5hYmxlZCA9IGNvbmZpZyAmJiB0eXBlb2YgY29uZmlnLmRyYWdFbmFibGVkID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8gY29uZmlnLmRyYWdFbmFibGVkXG4gICAgICAgICAgICA6IHRydWU7XG4gICAgICAgIHRoaXMuc2hvdWxkTG9vcCA9IGNvbmZpZyAmJiB0eXBlb2YgY29uZmlnLnNob3VsZExvb3AgPT09ICdib29sZWFuJ1xuICAgICAgICAgICAgPyBjb25maWcuc2hvdWxkTG9vcFxuICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGNvbmZpZyAmJiB0eXBlb2YgY29uZmlnLnRyYW5zaXRpb25EdXJhdGlvbiA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gY29uZmlnLnRyYW5zaXRpb25EdXJhdGlvblxuICAgICAgICAgICAgOiA2MDA7XG4gICAgICAgIHRoaXMuc2hvdWxkUmVjYWxjdWxhdGVPblJlc2l6ZSA9IGNvbmZpZyAmJiB0eXBlb2YgY29uZmlnLnNob3VsZFJlY2FsY3VsYXRlT25SZXNpemUgPT09ICdib29sZWFuJ1xuICAgICAgICAgICAgPyBjb25maWcuc2hvdWxkUmVjYWxjdWxhdGVPblJlc2l6ZVxuICAgICAgICAgICAgOiB0cnVlO1xuICAgIH1cbn1cbiJdfQ==