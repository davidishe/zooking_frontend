import { CarouselConfig } from '../../carousel-config';
import { CarouselAutoplay } from './carousel-autoplay';
import { InitializationState } from './initialization-state';
/**
 * Carousel state snapshot. Config is stored here
 * as well as other vital values like offset or
 * active slide index.
 */
export class CarouselState {
    constructor(state) {
        /**
         * Container to measure gallery width. Type is HTMLElement but
         * reduced for the ease of testing.
         */
        this.widthContainer = null;
        /** Container that should be animated during index change */
        this.animatableContainer = null;
        /** Client-side config which regulates carousel behavior */
        this.config = new CarouselConfig();
        this.activeSlideIndex = 0;
        /** Item index of config's items array */
        this.activeItemIndex = 0;
        this.template = null;
        /** X position of leftmost carousel slide */
        this.offset = 0;
        this.slides = [];
        /** State of multiphase initialization */
        this.initializationState = new InitializationState();
        /** Currently played animation */
        this.animation = null;
        this.autoplay = new CarouselAutoplay();
        if (state) {
            Object.assign(this, state);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtc3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL3ByaXZhdGUvbW9kZWxzL2Nhcm91c2VsLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU3RDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGFBQWE7SUFtQ3RCLFlBQVksS0FBcUI7UUFsQ2pDOzs7V0FHRztRQUNILG1CQUFjLEdBQWlDLElBQUksQ0FBQztRQUNwRCw0REFBNEQ7UUFDNUQsd0JBQW1CLEdBQXVCLElBQUksQ0FBQztRQUMvQywyREFBMkQ7UUFDM0QsV0FBTSxHQUFtQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzlDLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQUNyQix5Q0FBeUM7UUFDekMsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFDcEIsYUFBUSxHQUE0QixJQUFJLENBQUM7UUFDekMsNENBQTRDO1FBQzVDLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFDWCxXQUFNLEdBQW9CLEVBQUUsQ0FBQztRQUM3Qix5Q0FBeUM7UUFDekMsd0JBQW1CLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO1FBQ2hELGlDQUFpQztRQUNqQyxjQUFTLEdBQTZCLElBQUksQ0FBQztRQUMzQyxhQUFRLEdBQXFCLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQWVoRCxJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVhc2luZ0Z1bmN0aW9uIH0gZnJvbSAnYmV6aWVyLWVhc2luZyc7XG5cbmltcG9ydCB7IENhcm91c2VsQ29uZmlnIH0gZnJvbSAnLi4vLi4vY2Fyb3VzZWwtY29uZmlnJztcbmltcG9ydCB7IENhcm91c2VsQW5pbWF0aW9uIH0gZnJvbSAnLi9jYXJvdXNlbC1hbmltYXRpb24nO1xuaW1wb3J0IHsgQ2Fyb3VzZWxBdXRvcGxheSB9IGZyb20gJy4vY2Fyb3VzZWwtYXV0b3BsYXknO1xuaW1wb3J0IHsgQ2Fyb3VzZWxTbGlkZSB9IGZyb20gJy4vY2Fyb3VzZWwtc2xpZGUnO1xuaW1wb3J0IHsgSW5pdGlhbGl6YXRpb25TdGF0ZSB9IGZyb20gJy4vaW5pdGlhbGl6YXRpb24tc3RhdGUnO1xuXG4vKipcbiAqIENhcm91c2VsIHN0YXRlIHNuYXBzaG90LiBDb25maWcgaXMgc3RvcmVkIGhlcmVcbiAqIGFzIHdlbGwgYXMgb3RoZXIgdml0YWwgdmFsdWVzIGxpa2Ugb2Zmc2V0IG9yXG4gKiBhY3RpdmUgc2xpZGUgaW5kZXguXG4gKi9cbmV4cG9ydCBjbGFzcyBDYXJvdXNlbFN0YXRlIHtcbiAgICAvKipcbiAgICAgKiBDb250YWluZXIgdG8gbWVhc3VyZSBnYWxsZXJ5IHdpZHRoLiBUeXBlIGlzIEhUTUxFbGVtZW50IGJ1dFxuICAgICAqIHJlZHVjZWQgZm9yIHRoZSBlYXNlIG9mIHRlc3RpbmcuXG4gICAgICovXG4gICAgd2lkdGhDb250YWluZXI6IHtvZmZzZXRXaWR0aDogbnVtYmVyfSB8IG51bGwgPSBudWxsO1xuICAgIC8qKiBDb250YWluZXIgdGhhdCBzaG91bGQgYmUgYW5pbWF0ZWQgZHVyaW5nIGluZGV4IGNoYW5nZSAqL1xuICAgIGFuaW1hdGFibGVDb250YWluZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gICAgLyoqIENsaWVudC1zaWRlIGNvbmZpZyB3aGljaCByZWd1bGF0ZXMgY2Fyb3VzZWwgYmVoYXZpb3IgKi9cbiAgICBjb25maWc6IENhcm91c2VsQ29uZmlnID0gbmV3IENhcm91c2VsQ29uZmlnKCk7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IDA7XG4gICAgLyoqIEl0ZW0gaW5kZXggb2YgY29uZmlnJ3MgaXRlbXMgYXJyYXkgKi9cbiAgICBhY3RpdmVJdGVtSW5kZXggPSAwO1xuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgbnVsbCA9IG51bGw7XG4gICAgLyoqIFggcG9zaXRpb24gb2YgbGVmdG1vc3QgY2Fyb3VzZWwgc2xpZGUgKi9cbiAgICBvZmZzZXQgPSAwO1xuICAgIHNsaWRlczogQ2Fyb3VzZWxTbGlkZVtdID0gW107XG4gICAgLyoqIFN0YXRlIG9mIG11bHRpcGhhc2UgaW5pdGlhbGl6YXRpb24gKi9cbiAgICBpbml0aWFsaXphdGlvblN0YXRlID0gbmV3IEluaXRpYWxpemF0aW9uU3RhdGUoKTtcbiAgICAvKiogQ3VycmVudGx5IHBsYXllZCBhbmltYXRpb24gKi9cbiAgICBhbmltYXRpb246IENhcm91c2VsQW5pbWF0aW9uIHwgbnVsbCA9IG51bGw7XG4gICAgYXV0b3BsYXk6IENhcm91c2VsQXV0b3BsYXkgPSBuZXcgQ2Fyb3VzZWxBdXRvcGxheSgpO1xuICAgIGRyYWdCZXppZXJGbjogRWFzaW5nRnVuY3Rpb247XG4gICAgLyoqIFVzZWQgdG8gZXh0cmFjdCB2YWx1ZXMgdG8gYXBwbGllZCBiZXppZXJzICovXG4gICAgaW52ZXJ0ZWREcmFnQmV6aWVyRm46IEVhc2luZ0Z1bmN0aW9uO1xuICAgIGFuaW1hdGlvbkJlemllckZuOiBFYXNpbmdGdW5jdGlvbjtcbiAgICAvKipcbiAgICAgKiBXaGVuIG5vIHNsaWRlcyBhdmFpbGFibGUgYW5kIHVzZXIgaW50ZW50cyB0byBzZXQgaW5kZXgsXG4gICAgICogdGhpcyBmaWVsZCB3b3VsZCBiZSBpbml0aWFsaXplZCB3aXRoIGRlc2lyZWQgaW5kZXgsIHdoaWNoXG4gICAgICogc2hvdWxkIGJlIHRvIGFjdGl2ZVNsaWRlSW5kZXggd2hlbiBzbGlkZXMgYmVjb21lIGF2YWlsYWJsZVxuICAgICAqL1xuICAgIHBvc3Rwb25lZEl0ZW1JbmRleDogbnVtYmVyO1xuICAgIC8qKiBXaGV0aGVyIGRyYWcgaXMgaW4gcHJvY2VzcyByaWdodCBub3cgKi9cbiAgICBpc0RyYWdnZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZT86IENhcm91c2VsU3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==