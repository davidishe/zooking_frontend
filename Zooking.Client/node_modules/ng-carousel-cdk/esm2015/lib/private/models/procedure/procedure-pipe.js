import { ProcedureError } from '../procedure-error';
/** Organizes array of procedures into single procedure, flattens inner procedures */
export function procedurePipe(procedureName, ...args) {
    return (state, parentProcedureName) => {
        var _a, _b;
        let handler;
        let procedureIndex = 0;
        for (const procedure of args) {
            if (typeof procedure !== 'function') {
                continue;
            }
            const procedureState = Object.entries((_a = handler === null || handler === void 0 ? void 0 : handler.procedureState) !== null && _a !== void 0 ? _a : {}).length
                ? handler.procedureState
                : state.procedureState;
            const nextState = {
                state: (_b = handler === null || handler === void 0 ? void 0 : handler.state) !== null && _b !== void 0 ? _b : state.state,
                procedureState: procedureState || {},
                environment: state.environment,
            };
            const procedureSlot = `${procedureName}[${procedureIndex}]`;
            const procedureChainString = parentProcedureName
                ? `${parentProcedureName}->${procedureSlot}`
                : procedureSlot;
            let localHandler;
            while (typeof localHandler === 'function' || !localHandler) {
                try {
                    localHandler = !localHandler
                        ? procedure(nextState, procedureChainString)
                        : localHandler(nextState, procedureChainString);
                }
                catch (e) {
                    if (!(e instanceof ProcedureError)) {
                        console.error(`Procedure interrupted at ${procedureChainString}`);
                    }
                    throw new ProcedureError(e);
                }
            }
            handler = localHandler;
            procedureIndex++;
            if (handler.shouldBreakProcedure) {
                break;
            }
        }
        return handler;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2VkdXJlLXBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL3ByaXZhdGUvbW9kZWxzL3Byb2NlZHVyZS9wcm9jZWR1cmUtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFPcEQscUZBQXFGO0FBQ3JGLE1BQU0sVUFBVSxhQUFhLENBQUMsYUFBcUIsRUFBRSxHQUFHLElBQWtDO0lBQ3RGLE9BQU8sQ0FBQyxLQUEyQixFQUFFLG1CQUE0QixFQUFvQixFQUFFOztRQUNuRixJQUFJLE9BQXlCLENBQUM7UUFDOUIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssTUFBTSxTQUFTLElBQUksSUFBSSxFQUFFO1lBQzFCLElBQUksT0FBTyxTQUFTLEtBQUssVUFBVSxFQUFFO2dCQUNqQyxTQUFTO2FBQ1o7WUFDRCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxPQUFDLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxjQUFjLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU07Z0JBQ3ZFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYztnQkFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7WUFDM0IsTUFBTSxTQUFTLEdBQXlCO2dCQUNwQyxLQUFLLFFBQUUsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLEtBQUssbUNBQUksS0FBSyxDQUFDLEtBQUs7Z0JBQ3BDLGNBQWMsRUFBRSxjQUFjLElBQUksRUFBRTtnQkFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO2FBQ2pDLENBQUM7WUFDRixNQUFNLGFBQWEsR0FBRyxHQUFHLGFBQWEsSUFBSSxjQUFjLEdBQUcsQ0FBQztZQUM1RCxNQUFNLG9CQUFvQixHQUFHLG1CQUFtQjtnQkFDNUMsQ0FBQyxDQUFDLEdBQUcsbUJBQW1CLEtBQUssYUFBYSxFQUFFO2dCQUM1QyxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQ3BCLElBQUksWUFBMEMsQ0FBQztZQUMvQyxPQUFPLE9BQU8sWUFBWSxLQUFLLFVBQVUsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDeEQsSUFBSTtvQkFDQSxZQUFZLEdBQUcsQ0FBQyxZQUFZO3dCQUN4QixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQzt3QkFDNUMsQ0FBQyxDQUFFLFlBQTBCLENBQUMsU0FBUyxFQUFFLG9CQUFvQixDQUFDLENBQUM7aUJBQ3RFO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNSLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxjQUFjLENBQUMsRUFBRTt3QkFDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO3FCQUNyRTtvQkFDRCxNQUFNLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUMvQjthQUNKO1lBQ0QsT0FBTyxHQUFHLFlBQVksQ0FBQztZQUN2QixjQUFjLEVBQUUsQ0FBQztZQUNqQixJQUFJLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRTtnQkFDOUIsTUFBTTthQUNUO1NBQ0o7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvY2VkdXJlRXJyb3IgfSBmcm9tICcuLi9wcm9jZWR1cmUtZXJyb3InO1xuaW1wb3J0IHsgQ29tcG9zZWRQcm9jZWR1cmUgfSBmcm9tICcuL2NvbXBvc2VkLXByb2NlZHVyZS50eXBlJztcbmltcG9ydCB7IFByb2NlZHVyZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXIvcHJvY2VkdXJlLWhhbmRsZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFByb2NlZHVyZVJlc3VsdCB9IGZyb20gJy4vcHJvY2VkdXJlLXJlc3VsdC50eXBlJztcbmltcG9ydCB7IFByb2NlZHVyZVN0YXRlRmFjYWRlIH0gZnJvbSAnLi9wcm9jZWR1cmUtc3RhdGUtZmFjYWRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQcm9jZWR1cmUgfSBmcm9tICcuL3Byb2NlZHVyZS50eXBlJztcblxuLyoqIE9yZ2FuaXplcyBhcnJheSBvZiBwcm9jZWR1cmVzIGludG8gc2luZ2xlIHByb2NlZHVyZSwgZmxhdHRlbnMgaW5uZXIgcHJvY2VkdXJlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2NlZHVyZVBpcGUocHJvY2VkdXJlTmFtZTogc3RyaW5nLCAuLi5hcmdzOiAoQ29tcG9zZWRQcm9jZWR1cmUgfCBudWxsKVtdKTogUHJvY2VkdXJlUmVzdWx0IHtcbiAgICByZXR1cm4gKHN0YXRlOiBQcm9jZWR1cmVTdGF0ZUZhY2FkZSwgcGFyZW50UHJvY2VkdXJlTmFtZT86IHN0cmluZyk6IFByb2NlZHVyZUhhbmRsZXIgPT4ge1xuICAgICAgICBsZXQgaGFuZGxlcjogUHJvY2VkdXJlSGFuZGxlcjtcbiAgICAgICAgbGV0IHByb2NlZHVyZUluZGV4ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZWR1cmUgb2YgYXJncykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9jZWR1cmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb2NlZHVyZVN0YXRlID0gT2JqZWN0LmVudHJpZXMoaGFuZGxlcj8ucHJvY2VkdXJlU3RhdGUgPz8ge30pLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gaGFuZGxlci5wcm9jZWR1cmVTdGF0ZVxuICAgICAgICAgICAgICAgIDogc3RhdGUucHJvY2VkdXJlU3RhdGU7XG4gICAgICAgICAgICBjb25zdCBuZXh0U3RhdGU6IFByb2NlZHVyZVN0YXRlRmFjYWRlID0ge1xuICAgICAgICAgICAgICAgIHN0YXRlOiBoYW5kbGVyPy5zdGF0ZSA/PyBzdGF0ZS5zdGF0ZSxcbiAgICAgICAgICAgICAgICBwcm9jZWR1cmVTdGF0ZTogcHJvY2VkdXJlU3RhdGUgfHwge30sXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHN0YXRlLmVudmlyb25tZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHByb2NlZHVyZVNsb3QgPSBgJHtwcm9jZWR1cmVOYW1lfVske3Byb2NlZHVyZUluZGV4fV1gO1xuICAgICAgICAgICAgY29uc3QgcHJvY2VkdXJlQ2hhaW5TdHJpbmcgPSBwYXJlbnRQcm9jZWR1cmVOYW1lXG4gICAgICAgICAgICAgICAgPyBgJHtwYXJlbnRQcm9jZWR1cmVOYW1lfS0+JHtwcm9jZWR1cmVTbG90fWBcbiAgICAgICAgICAgICAgICA6IHByb2NlZHVyZVNsb3Q7XG4gICAgICAgICAgICBsZXQgbG9jYWxIYW5kbGVyOiBQcm9jZWR1cmVIYW5kbGVyIHwgUHJvY2VkdXJlO1xuICAgICAgICAgICAgd2hpbGUgKHR5cGVvZiBsb2NhbEhhbmRsZXIgPT09ICdmdW5jdGlvbicgfHwgIWxvY2FsSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsSGFuZGxlciA9ICFsb2NhbEhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvY2VkdXJlKG5leHRTdGF0ZSwgcHJvY2VkdXJlQ2hhaW5TdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChsb2NhbEhhbmRsZXIgYXMgUHJvY2VkdXJlKShuZXh0U3RhdGUsIHByb2NlZHVyZUNoYWluU3RyaW5nKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBQcm9jZWR1cmVFcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFByb2NlZHVyZSBpbnRlcnJ1cHRlZCBhdCAke3Byb2NlZHVyZUNoYWluU3RyaW5nfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQcm9jZWR1cmVFcnJvcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVyID0gbG9jYWxIYW5kbGVyO1xuICAgICAgICAgICAgcHJvY2VkdXJlSW5kZXgrKztcbiAgICAgICAgICAgIGlmIChoYW5kbGVyLnNob3VsZEJyZWFrUHJvY2VkdXJlKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFuZGxlcjtcbiAgICB9O1xufVxuIl19