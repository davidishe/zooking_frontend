import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, isDevMode, PLATFORM_ID } from '@angular/core';
import * as i0 from "@angular/core";
export class HammerProviderService {
    constructor(
    // tslint:disable-next-line: ban-types
    platformId) {
        this.platformId = platformId;
        this.hammerAbsenceDeclared = false;
    }
    managerFor(element) {
        const hasGestures = isPlatformBrowser(this.platformId) && window.Hammer;
        if (!hasGestures) {
            if (isDevMode() && !this.hammerAbsenceDeclared) {
                console.warn('Ng-carousel could not listen to drag, because HammerJS was not found. Either disable drag or import HammerJS.');
                this.hammerAbsenceDeclared = true;
            }
            return null;
        }
        const hammerManager = new Hammer(element);
        return hammerManager;
    }
}
HammerProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HammerProviderService_Factory() { return new HammerProviderService(i0.ɵɵinject(i0.PLATFORM_ID)); }, token: HammerProviderService, providedIn: "root" });
HammerProviderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HammerProviderService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFtbWVyLXByb3ZpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL3ByaXZhdGUvc2VydmljZS9oYW1tZXItcHJvdmlkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszRSxNQUFNLE9BQU8scUJBQXFCO0lBSTlCO0lBQ0ksc0NBQXNDO0lBQ1QsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUozQywwQkFBcUIsR0FBRyxLQUFLLENBQUM7SUFNdEMsQ0FBQztJQUVNLFVBQVUsQ0FBQyxPQUFvQjtRQUNsQyxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUssTUFBYyxDQUFDLE1BQU0sQ0FBQztRQUNqRixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2QsSUFBSSxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtnQkFDNUMsT0FBTyxDQUFDLElBQUksQ0FDUiwrR0FBK0csQ0FDbEgsQ0FBQztnQkFDRixJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO2FBQ3JDO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE1BQU0sYUFBYSxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTFDLE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7Ozs7WUE1QkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFPZ0QsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIGlzRGV2TW9kZSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSGFtbWVyUHJvdmlkZXJTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgaGFtbWVyQWJzZW5jZURlY2xhcmVkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBiYW4tdHlwZXNcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgKSB7XG4gICAgfVxuXG4gICAgcHVibGljIG1hbmFnZXJGb3IoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBIYW1tZXJNYW5hZ2VyIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGhhc0dlc3R1cmVzID0gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSAmJiAod2luZG93IGFzIGFueSkuSGFtbWVyO1xuICAgICAgICBpZiAoIWhhc0dlc3R1cmVzKSB7XG4gICAgICAgICAgICBpZiAoaXNEZXZNb2RlKCkgJiYgIXRoaXMuaGFtbWVyQWJzZW5jZURlY2xhcmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAnTmctY2Fyb3VzZWwgY291bGQgbm90IGxpc3RlbiB0byBkcmFnLCBiZWNhdXNlIEhhbW1lckpTIHdhcyBub3QgZm91bmQuIEVpdGhlciBkaXNhYmxlIGRyYWcgb3IgaW1wb3J0IEhhbW1lckpTLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFtbWVyQWJzZW5jZURlY2xhcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFtbWVyTWFuYWdlciA9IG5ldyBIYW1tZXIoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIGhhbW1lck1hbmFnZXI7XG4gICAgfVxufVxuIl19