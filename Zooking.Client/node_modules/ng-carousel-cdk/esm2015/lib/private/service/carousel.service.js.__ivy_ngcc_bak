import { AnimationBuilder } from '@angular/animations';
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { CarouselState } from '../models/carousel-state';
import { IdGenerator } from '../models/id-generator';
import { procedurePipe } from '../models/procedure/procedure-pipe';
import { SLIDE_ID_GENERATOR } from '../tokens';
import { disableAutoplayProcedure } from './helpers/disable-autoplay/disable-autoplay-procedure';
import { enableAutoplayProcedure } from './helpers/enable-autoplay/enable-autoplay-procedure';
import { cleanupProcedure } from './procedures/cleanup-procedure';
import { dragEndProcedure } from './procedures/drag-end-procedure';
import { dragProcedure } from './procedures/drag-procedure';
import { dragStartProcedure } from './procedures/drag-start-procedure';
import { goToProcedure } from './procedures/go-to-procedure';
import { initializeConfigProcedure } from './procedures/initialize-config-procedure';
import { initializeContainersProcedure } from './procedures/initialize-containers-procedure';
import { nextProcedure } from './procedures/next-procedure';
import { prevProcedure } from './procedures/prev-procedure';
import { recalculateProcedure } from './procedures/recalculate-procedure';
import { ANIMATION_BEZIER_ARGS } from './procedures/set-beziers/set-beziers-procedure';
import { setTemplateProcedure } from './procedures/set-template/set-template-procedure';
/**
 * Short swipe might not change slide to next/prev.
 * This const specifies how much (% of viewport) swipe
 * should overcome to trigger next/prev slide change.
 */
const MAX_SWIPE_THRESHOLD = 15;
/**
 * How much % user can stretch carousel, when there's no more
 * drag available
 */
const MAX_OVERSCROLL = 10;
export class CarouselService {
    constructor(animationBuilder, slideIdGenerator, 
    // tslint:disable-next-line: ban-types
    platformId) {
        this.animationBuilder = animationBuilder;
        this.slideIdGenerator = slideIdGenerator;
        this.platformId = platformId;
        this.carouselState$ = new BehaviorSubject(new CarouselState());
        /** Describes constant entities for procedures */
        this.procedureEnvironment = {
            slideIdGenerator: this.slideIdGenerator,
            isBrowser: isPlatformBrowser(this.platformId),
            autoplayAction: this.next.bind(this),
            afterAnimationAction: this.cleanup.bind(this),
            animationBuilder: this.animationBuilder,
            animationBezierArgs: ANIMATION_BEZIER_ARGS,
            swipeThreshold: MAX_SWIPE_THRESHOLD,
            maxOverscroll: MAX_OVERSCROLL,
        };
    }
    ngOnDestroy() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.carouselState$.getValue()) === null || _a === void 0 ? void 0 : _a.autoplay) === null || _b === void 0 ? void 0 : _b.autoplaySubscription) === null || _c === void 0 ? void 0 : _c.unsubscribe();
    }
    carouselStateChanges() {
        return this.carouselState$.asObservable();
    }
    setItemIndex(newItemIndex) {
        this.apply(goToProcedure(newItemIndex));
    }
    prev() {
        this.apply(prevProcedure());
    }
    /**
     * @param omitAutoplayReset whether autoplay timer should not be resetted
     */
    next(omitAutoplayReset = false) {
        this.apply(nextProcedure(omitAutoplayReset));
    }
    recalculate() {
        this.apply(recalculateProcedure());
    }
    /** Update state to announce that drag sequence just started */
    dragStart() {
        this.apply(dragStartProcedure());
    }
    /**
     * Update state to announce that drag sequence just ended
     * and perform necessary cleanups
     */
    dragEnd(passedDistance) {
        this.apply(dragEndProcedure(passedDistance));
    }
    /** Process single drag tick with given from and to coordinates */
    drag(fromX, toX) {
        this.apply(dragProcedure(fromX, toX));
    }
    setSlideTemplate(newTemplateRef) {
        this.apply(setTemplateProcedure(newTemplateRef));
    }
    disableAutoplay(suspender) {
        this.apply(disableAutoplayProcedure(suspender));
    }
    /**
     * Starts new autoplay timer
     */
    enableAutoplay(suspender = null) {
        this.apply(enableAutoplayProcedure(suspender));
    }
    setContainers(widthContainer, animatableContainer) {
        this.apply(initializeContainersProcedure(widthContainer, animatableContainer));
    }
    setConfig(newConfig) {
        this.apply(initializeConfigProcedure(newConfig));
    }
    cleanup() {
        this.apply(cleanupProcedure());
    }
    /**
     * Applies specified procedure to carousel state
     */
    apply(procedure) {
        const state = Object.assign({}, this.carouselState$.getValue());
        const result = procedurePipe('applier', procedure)({ state, procedureState: {}, environment: this.procedureEnvironment });
        this.carouselState$.next(result.state);
    }
}
CarouselService.decorators = [
    { type: Injectable }
];
CarouselService.ctorParameters = () => [
    { type: AnimationBuilder },
    { type: IdGenerator, decorators: [{ type: Inject, args: [SLIDE_ID_GENERATOR,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,