import { procedurePipe } from '../../models/procedure/procedure-pipe';
import { calculateActiveSlideProcedure } from '../helpers/calculate-active-slide/calculate-active-slide-procedure';
import { calculateOffsetProcedure } from '../helpers/calculate-offset/calculate-offset-procedure';
import { destroyAnimationProcedure } from '../helpers/destroy-animation/destroy-animation-procedure';
import { enableAutoplayProcedure } from '../helpers/enable-autoplay/enable-autoplay-procedure';
import { initializeCarouselProcedure } from '../helpers/initialize-carousel/initialize-carousel-procedure';
import { markVisibleAndActiveProcedure } from '../helpers/mark-visible-and-active/mark-visible-and-active-procedure';
import { shuffleSlidesProcedure } from '../helpers/shuffle-slides/shuffle-slides-procedure';
import { postponeInitializationProcedure } from './postpone-initialization/postpone-initialization-procedure';
import { setBeziersProcedure } from './set-beziers/set-beziers-procedure';
import { setFirstInitializationProcedure } from './set-first-initalization/set-first-initialization-procedure';
import { setPostponedIndexProcedure } from './set-postponed-index/set-postponed-index-procedure';
/**
 * Creates slides from scratch
 */
export function initializeProcedure() {
    return procedurePipe('initialize', postponeInitializationProcedure(), setFirstInitializationProcedure(), initializeCarouselProcedure(), calculateOffsetProcedure(), markVisibleAndActiveProcedure(), shuffleSlidesProcedure(), destroyAnimationProcedure(), enableAutoplayProcedure(), calculateActiveSlideProcedure(), setBeziersProcedure(), setPostponedIndexProcedure());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6ZS1wcm9jZWR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL3ByaXZhdGUvc2VydmljZS9wcm9jZWR1cmVzL2luaXRpYWxpemUtcHJvY2VkdXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUNuSCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNsRyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUNyRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUMzRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxzRUFBc0UsQ0FBQztBQUNySCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUM1RixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUM5RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUMvRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUVqRzs7R0FFRztBQUNILE1BQU0sVUFBVSxtQkFBbUI7SUFDL0IsT0FBTyxhQUFhLENBQUMsWUFBWSxFQUM3QiwrQkFBK0IsRUFBRSxFQUVqQywrQkFBK0IsRUFBRSxFQUNqQywyQkFBMkIsRUFBRSxFQUM3Qix3QkFBd0IsRUFBRSxFQUMxQiw2QkFBNkIsRUFBRSxFQUMvQixzQkFBc0IsRUFBRSxFQUN4Qix5QkFBeUIsRUFBRSxFQUMzQix1QkFBdUIsRUFBRSxFQUN6Qiw2QkFBNkIsRUFBRSxFQUMvQixtQkFBbUIsRUFBRSxFQUVyQiwwQkFBMEIsRUFBRSxDQUMvQixDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb2NlZHVyZVBpcGUgfSBmcm9tICcuLi8uLi9tb2RlbHMvcHJvY2VkdXJlL3Byb2NlZHVyZS1waXBlJztcbmltcG9ydCB7IFByb2NlZHVyZSB9IGZyb20gJy4uLy4uL21vZGVscy9wcm9jZWR1cmUvcHJvY2VkdXJlLnR5cGUnO1xuaW1wb3J0IHsgY2FsY3VsYXRlQWN0aXZlU2xpZGVQcm9jZWR1cmUgfSBmcm9tICcuLi9oZWxwZXJzL2NhbGN1bGF0ZS1hY3RpdmUtc2xpZGUvY2FsY3VsYXRlLWFjdGl2ZS1zbGlkZS1wcm9jZWR1cmUnO1xuaW1wb3J0IHsgY2FsY3VsYXRlT2Zmc2V0UHJvY2VkdXJlIH0gZnJvbSAnLi4vaGVscGVycy9jYWxjdWxhdGUtb2Zmc2V0L2NhbGN1bGF0ZS1vZmZzZXQtcHJvY2VkdXJlJztcbmltcG9ydCB7IGRlc3Ryb3lBbmltYXRpb25Qcm9jZWR1cmUgfSBmcm9tICcuLi9oZWxwZXJzL2Rlc3Ryb3ktYW5pbWF0aW9uL2Rlc3Ryb3ktYW5pbWF0aW9uLXByb2NlZHVyZSc7XG5pbXBvcnQgeyBlbmFibGVBdXRvcGxheVByb2NlZHVyZSB9IGZyb20gJy4uL2hlbHBlcnMvZW5hYmxlLWF1dG9wbGF5L2VuYWJsZS1hdXRvcGxheS1wcm9jZWR1cmUnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNhcm91c2VsUHJvY2VkdXJlIH0gZnJvbSAnLi4vaGVscGVycy9pbml0aWFsaXplLWNhcm91c2VsL2luaXRpYWxpemUtY2Fyb3VzZWwtcHJvY2VkdXJlJztcbmltcG9ydCB7IG1hcmtWaXNpYmxlQW5kQWN0aXZlUHJvY2VkdXJlIH0gZnJvbSAnLi4vaGVscGVycy9tYXJrLXZpc2libGUtYW5kLWFjdGl2ZS9tYXJrLXZpc2libGUtYW5kLWFjdGl2ZS1wcm9jZWR1cmUnO1xuaW1wb3J0IHsgc2h1ZmZsZVNsaWRlc1Byb2NlZHVyZSB9IGZyb20gJy4uL2hlbHBlcnMvc2h1ZmZsZS1zbGlkZXMvc2h1ZmZsZS1zbGlkZXMtcHJvY2VkdXJlJztcbmltcG9ydCB7IHBvc3Rwb25lSW5pdGlhbGl6YXRpb25Qcm9jZWR1cmUgfSBmcm9tICcuL3Bvc3Rwb25lLWluaXRpYWxpemF0aW9uL3Bvc3Rwb25lLWluaXRpYWxpemF0aW9uLXByb2NlZHVyZSc7XG5pbXBvcnQgeyBzZXRCZXppZXJzUHJvY2VkdXJlIH0gZnJvbSAnLi9zZXQtYmV6aWVycy9zZXQtYmV6aWVycy1wcm9jZWR1cmUnO1xuaW1wb3J0IHsgc2V0Rmlyc3RJbml0aWFsaXphdGlvblByb2NlZHVyZSB9IGZyb20gJy4vc2V0LWZpcnN0LWluaXRhbGl6YXRpb24vc2V0LWZpcnN0LWluaXRpYWxpemF0aW9uLXByb2NlZHVyZSc7XG5pbXBvcnQgeyBzZXRQb3N0cG9uZWRJbmRleFByb2NlZHVyZSB9IGZyb20gJy4vc2V0LXBvc3Rwb25lZC1pbmRleC9zZXQtcG9zdHBvbmVkLWluZGV4LXByb2NlZHVyZSc7XG5cbi8qKlxuICogQ3JlYXRlcyBzbGlkZXMgZnJvbSBzY3JhdGNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplUHJvY2VkdXJlKCk6IFByb2NlZHVyZSB7XG4gICAgcmV0dXJuIHByb2NlZHVyZVBpcGUoJ2luaXRpYWxpemUnLFxuICAgICAgICBwb3N0cG9uZUluaXRpYWxpemF0aW9uUHJvY2VkdXJlKCksXG5cbiAgICAgICAgc2V0Rmlyc3RJbml0aWFsaXphdGlvblByb2NlZHVyZSgpLFxuICAgICAgICBpbml0aWFsaXplQ2Fyb3VzZWxQcm9jZWR1cmUoKSxcbiAgICAgICAgY2FsY3VsYXRlT2Zmc2V0UHJvY2VkdXJlKCksXG4gICAgICAgIG1hcmtWaXNpYmxlQW5kQWN0aXZlUHJvY2VkdXJlKCksXG4gICAgICAgIHNodWZmbGVTbGlkZXNQcm9jZWR1cmUoKSxcbiAgICAgICAgZGVzdHJveUFuaW1hdGlvblByb2NlZHVyZSgpLFxuICAgICAgICBlbmFibGVBdXRvcGxheVByb2NlZHVyZSgpLFxuICAgICAgICBjYWxjdWxhdGVBY3RpdmVTbGlkZVByb2NlZHVyZSgpLFxuICAgICAgICBzZXRCZXppZXJzUHJvY2VkdXJlKCksXG5cbiAgICAgICAgc2V0UG9zdHBvbmVkSW5kZXhQcm9jZWR1cmUoKSxcbiAgICApO1xufVxuIl19