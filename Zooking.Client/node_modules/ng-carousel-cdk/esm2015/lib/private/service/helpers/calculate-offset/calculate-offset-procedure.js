import { ContinueWith } from '../../../models/procedure/handler/contiue-with.model';
import { getViewportWidth } from '../get-viewport-width/get-viewport-width';
import { calculateOffset } from './calculate-offset';
/**
 * Given current slide state, assigns carousel offset
 */
export function calculateOffsetProcedure() {
    return ({ state, procedureState }) => {
        state = Object.assign({}, state);
        const result = calculateOffset(state.activeSlideIndex, state.config.alignMode, state.config.slideWidth, getViewportWidth(state), state.slides.length, state.config.shouldLoop);
        state.offset = result.offset;
        return new ContinueWith(state, procedureState);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlLW9mZnNldC1wcm9jZWR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL3ByaXZhdGUvc2VydmljZS9oZWxwZXJzL2NhbGN1bGF0ZS1vZmZzZXQvY2FsY3VsYXRlLW9mZnNldC1wcm9jZWR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBR3BGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRDs7R0FFRztBQUNILE1BQU0sVUFBVSx3QkFBd0I7SUFDcEMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLGNBQWMsRUFBdUIsRUFBRSxFQUFFO1FBQ3JELEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqQyxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQzFCLEtBQUssQ0FBQyxnQkFBZ0IsRUFDdEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQ3RCLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUN2QixnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsRUFDdkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQ25CLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUMxQixDQUFDO1FBQ0YsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRTdCLE9BQU8sSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250aW51ZVdpdGggfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvcHJvY2VkdXJlL2hhbmRsZXIvY29udGl1ZS13aXRoLm1vZGVsJztcbmltcG9ydCB7IFByb2NlZHVyZVN0YXRlRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL3Byb2NlZHVyZS9wcm9jZWR1cmUtc3RhdGUtZmFjYWRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQcm9jZWR1cmUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvcHJvY2VkdXJlL3Byb2NlZHVyZS50eXBlJztcbmltcG9ydCB7IGdldFZpZXdwb3J0V2lkdGggfSBmcm9tICcuLi9nZXQtdmlld3BvcnQtd2lkdGgvZ2V0LXZpZXdwb3J0LXdpZHRoJztcbmltcG9ydCB7IGNhbGN1bGF0ZU9mZnNldCB9IGZyb20gJy4vY2FsY3VsYXRlLW9mZnNldCc7XG5cbi8qKlxuICogR2l2ZW4gY3VycmVudCBzbGlkZSBzdGF0ZSwgYXNzaWducyBjYXJvdXNlbCBvZmZzZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldFByb2NlZHVyZSgpOiBQcm9jZWR1cmUge1xuICAgIHJldHVybiAoe3N0YXRlLCBwcm9jZWR1cmVTdGF0ZX06IFByb2NlZHVyZVN0YXRlRmFjYWRlKSA9PiB7XG4gICAgICAgIHN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVPZmZzZXQoXG4gICAgICAgICAgICBzdGF0ZS5hY3RpdmVTbGlkZUluZGV4LFxuICAgICAgICAgICAgc3RhdGUuY29uZmlnLmFsaWduTW9kZSxcbiAgICAgICAgICAgIHN0YXRlLmNvbmZpZy5zbGlkZVdpZHRoLFxuICAgICAgICAgICAgZ2V0Vmlld3BvcnRXaWR0aChzdGF0ZSksXG4gICAgICAgICAgICBzdGF0ZS5zbGlkZXMubGVuZ3RoLFxuICAgICAgICAgICAgc3RhdGUuY29uZmlnLnNob3VsZExvb3AsXG4gICAgICAgICk7XG4gICAgICAgIHN0YXRlLm9mZnNldCA9IHJlc3VsdC5vZmZzZXQ7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb250aW51ZVdpdGgoc3RhdGUsIHByb2NlZHVyZVN0YXRlKTtcbiAgICB9O1xufVxuIl19