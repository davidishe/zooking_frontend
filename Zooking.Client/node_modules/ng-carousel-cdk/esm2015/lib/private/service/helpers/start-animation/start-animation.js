import { animate, style } from '@angular/animations';
import { bindCallback } from 'rxjs';
import { CarouselAnimation } from '../../../models/carousel-animation';
export function startAnimation(container, from, to, widthMode, transitionDuration, bezierArgs, isBrowser, afterAnimationAction, animationBuilder) {
    if (!isBrowser) {
        return null;
    }
    const cubicBezier = `cubic-bezier(${bezierArgs[0]},${bezierArgs[1]},${bezierArgs[2]},${bezierArgs[3]})`;
    const animationFactory = animationBuilder.build([
        style({
            transform: `translateX(${from}${widthMode})`,
        }),
        animate(`${transitionDuration}ms ${cubicBezier}`, style({
            transform: `translateX(${to}${widthMode})`,
        })),
    ]);
    const animationPlayer = animationFactory.create(container);
    // Wrap onDone into observable
    const boundFunction = bindCallback(animationPlayer.onDone); // Wrap function into function that returns observable
    const onDone$ = boundFunction.call(animationPlayer); // Receive observable with context of animation player
    const subscription$ = onDone$
        .subscribe(() => {
        animationPlayer.destroy();
        afterAnimationAction();
    });
    const animation = new CarouselAnimation(from, to, animationPlayer, subscription$);
    animationPlayer.play();
    return animation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY2Fyb3VzZWwvc3JjL2xpYi9wcml2YXRlL3NlcnZpY2UvaGVscGVycy9zdGFydC1hbmltYXRpb24vc3RhcnQtYW5pbWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQW9CLEtBQUssRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHcEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFdkUsTUFBTSxVQUFVLGNBQWMsQ0FDMUIsU0FBc0IsRUFDdEIsSUFBWSxFQUNaLEVBQVUsRUFDVixTQUE0QixFQUM1QixrQkFBMEIsRUFDMUIsVUFBb0IsRUFDcEIsU0FBa0IsRUFDbEIsb0JBQWdDLEVBQ2hDLGdCQUFrQztJQUVsQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBRVosT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELE1BQU0sV0FBVyxHQUFHLGdCQUFnQixVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUN4RyxNQUFNLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztRQUM1QyxLQUFLLENBQUM7WUFDRixTQUFTLEVBQUUsY0FBYyxJQUFJLEdBQUcsU0FBUyxHQUFHO1NBQy9DLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxXQUFXLEVBQUUsRUFBRSxLQUFLLENBQUM7WUFDcEQsU0FBUyxFQUFFLGNBQWMsRUFBRSxHQUFHLFNBQVMsR0FBRztTQUM3QyxDQUFDLENBQUM7S0FDTixDQUFDLENBQUM7SUFDSCxNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0QsOEJBQThCO0lBQzlCLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxzREFBc0Q7SUFDbEgsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLHNEQUFzRDtJQUMzRyxNQUFNLGFBQWEsR0FBRyxPQUFPO1NBQ3hCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWixlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUIsb0JBQW9CLEVBQUUsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLE1BQU0sU0FBUyxHQUFHLElBQUksaUJBQWlCLENBQ25DLElBQUksRUFDSixFQUFFLEVBQ0YsZUFBZSxFQUNmLGFBQWEsQ0FDaEIsQ0FBQztJQUNGLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV2QixPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgQW5pbWF0aW9uQnVpbGRlciwgc3R5bGUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBDYXJvdXNlbFdpZHRoTW9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL2Nhcm91c2VsLXdpZHRoLW1vZGUnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxBbmltYXRpb24gfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvY2Fyb3VzZWwtYW5pbWF0aW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgZnJvbTogbnVtYmVyLFxuICAgIHRvOiBudW1iZXIsXG4gICAgd2lkdGhNb2RlOiBDYXJvdXNlbFdpZHRoTW9kZSxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlcixcbiAgICBiZXppZXJBcmdzOiBudW1iZXJbXSxcbiAgICBpc0Jyb3dzZXI6IGJvb2xlYW4sXG4gICAgYWZ0ZXJBbmltYXRpb25BY3Rpb246ICgpID0+IHZvaWQsXG4gICAgYW5pbWF0aW9uQnVpbGRlcjogQW5pbWF0aW9uQnVpbGRlcixcbik6IENhcm91c2VsQW5pbWF0aW9uIHtcbiAgICBpZiAoIWlzQnJvd3Nlcikge1xuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGN1YmljQmV6aWVyID0gYGN1YmljLWJlemllcigke2JlemllckFyZ3NbMF19LCR7YmV6aWVyQXJnc1sxXX0sJHtiZXppZXJBcmdzWzJdfSwke2JlemllckFyZ3NbM119KWA7XG4gICAgY29uc3QgYW5pbWF0aW9uRmFjdG9yeSA9IGFuaW1hdGlvbkJ1aWxkZXIuYnVpbGQoW1xuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKCR7ZnJvbX0ke3dpZHRoTW9kZX0pYCxcbiAgICAgICAgfSksXG4gICAgICAgIGFuaW1hdGUoYCR7dHJhbnNpdGlvbkR1cmF0aW9ufW1zICR7Y3ViaWNCZXppZXJ9YCwgc3R5bGUoe1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgke3RvfSR7d2lkdGhNb2RlfSlgLFxuICAgICAgICB9KSksXG4gICAgXSk7XG4gICAgY29uc3QgYW5pbWF0aW9uUGxheWVyID0gYW5pbWF0aW9uRmFjdG9yeS5jcmVhdGUoY29udGFpbmVyKTtcbiAgICAvLyBXcmFwIG9uRG9uZSBpbnRvIG9ic2VydmFibGVcbiAgICBjb25zdCBib3VuZEZ1bmN0aW9uID0gYmluZENhbGxiYWNrKGFuaW1hdGlvblBsYXllci5vbkRvbmUpOyAvLyBXcmFwIGZ1bmN0aW9uIGludG8gZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9ic2VydmFibGVcbiAgICBjb25zdCBvbkRvbmUkID0gYm91bmRGdW5jdGlvbi5jYWxsKGFuaW1hdGlvblBsYXllcik7IC8vIFJlY2VpdmUgb2JzZXJ2YWJsZSB3aXRoIGNvbnRleHQgb2YgYW5pbWF0aW9uIHBsYXllclxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiQgPSBvbkRvbmUkXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgYW5pbWF0aW9uUGxheWVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIGFmdGVyQW5pbWF0aW9uQWN0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBDYXJvdXNlbEFuaW1hdGlvbihcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIGFuaW1hdGlvblBsYXllcixcbiAgICAgICAgc3Vic2NyaXB0aW9uJCxcbiAgICApO1xuICAgIGFuaW1hdGlvblBsYXllci5wbGF5KCk7XG5cbiAgICByZXR1cm4gYW5pbWF0aW9uO1xufVxuIl19