import { ContinueWith } from '../../../models/procedure/handler/contiue-with.model';
import { animationOffsetSnapshot } from './animation-offset-snapshot';
/**
 * Assigns offset to state like if animation was paused.
 * If animation is not available, current offset will be assigned.
 */
export function animationOffsetSnapshotProcedure() {
    return ({ state }) => {
        var _a, _b, _c, _d;
        const time = new Date().getTime();
        const currentPosition = time - ((_b = (_a = state.animation) === null || _a === void 0 ? void 0 : _a.startTime) !== null && _b !== void 0 ? _b : time);
        const result = animationOffsetSnapshot(currentPosition, state.config.transitionDuration, (_c = state.animation) === null || _c === void 0 ? void 0 : _c.from, (_d = state.animation) === null || _d === void 0 ? void 0 : _d.to, state.offset, state.animationBezierFn);
        state.offset = result;
        return new ContinueWith(state);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLW9mZnNldC1zbmFwc2hvdC1wcm9jZWR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL3ByaXZhdGUvc2VydmljZS9oZWxwZXJzL2FuaW1hdGlvbi1vZmZzZXQtc25hcHNob3QvYW5pbWF0aW9uLW9mZnNldC1zbmFwc2hvdC1wcm9jZWR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBSXBGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXRFOzs7R0FHRztBQUNILE1BQU0sVUFBVSxnQ0FBZ0M7SUFDNUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUF1QixFQUFvQixFQUFFOztRQUN2RCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xDLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxhQUFDLEtBQUssQ0FBQyxTQUFTLDBDQUFFLFNBQVMsbUNBQUksSUFBSSxDQUFDLENBQUM7UUFDcEUsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQ2xDLGVBQWUsRUFDZixLQUFLLENBQUMsTUFBTSxDQUFDLGtCQUFrQixRQUMvQixLQUFLLENBQUMsU0FBUywwQ0FBRSxJQUFJLFFBQ3JCLEtBQUssQ0FBQyxTQUFTLDBDQUFFLEVBQUUsRUFDbkIsS0FBSyxDQUFDLE1BQU0sRUFDWixLQUFLLENBQUMsaUJBQWlCLENBQzFCLENBQUM7UUFDRixLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUV0QixPQUFPLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250aW51ZVdpdGggfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvcHJvY2VkdXJlL2hhbmRsZXIvY29udGl1ZS13aXRoLm1vZGVsJztcbmltcG9ydCB7IFByb2NlZHVyZUhhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvcHJvY2VkdXJlL2hhbmRsZXIvcHJvY2VkdXJlLWhhbmRsZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFByb2NlZHVyZVN0YXRlRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL3Byb2NlZHVyZS9wcm9jZWR1cmUtc3RhdGUtZmFjYWRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQcm9jZWR1cmUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvcHJvY2VkdXJlL3Byb2NlZHVyZS50eXBlJztcbmltcG9ydCB7IGFuaW1hdGlvbk9mZnNldFNuYXBzaG90IH0gZnJvbSAnLi9hbmltYXRpb24tb2Zmc2V0LXNuYXBzaG90JztcblxuLyoqXG4gKiBBc3NpZ25zIG9mZnNldCB0byBzdGF0ZSBsaWtlIGlmIGFuaW1hdGlvbiB3YXMgcGF1c2VkLlxuICogSWYgYW5pbWF0aW9uIGlzIG5vdCBhdmFpbGFibGUsIGN1cnJlbnQgb2Zmc2V0IHdpbGwgYmUgYXNzaWduZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRpb25PZmZzZXRTbmFwc2hvdFByb2NlZHVyZSgpOiBQcm9jZWR1cmUge1xuICAgIHJldHVybiAoe3N0YXRlfTogUHJvY2VkdXJlU3RhdGVGYWNhZGUpOiBQcm9jZWR1cmVIYW5kbGVyID0+IHtcbiAgICAgICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSB0aW1lIC0gKHN0YXRlLmFuaW1hdGlvbj8uc3RhcnRUaW1lID8/IHRpbWUpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhbmltYXRpb25PZmZzZXRTbmFwc2hvdChcbiAgICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbixcbiAgICAgICAgICAgIHN0YXRlLmNvbmZpZy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgICAgICBzdGF0ZS5hbmltYXRpb24/LmZyb20sXG4gICAgICAgICAgICBzdGF0ZS5hbmltYXRpb24/LnRvLFxuICAgICAgICAgICAgc3RhdGUub2Zmc2V0LFxuICAgICAgICAgICAgc3RhdGUuYW5pbWF0aW9uQmV6aWVyRm4sXG4gICAgICAgICk7XG4gICAgICAgIHN0YXRlLm9mZnNldCA9IHJlc3VsdDtcblxuICAgICAgICByZXR1cm4gbmV3IENvbnRpbnVlV2l0aChzdGF0ZSk7XG4gICAgfTtcbn1cbiJdfQ==