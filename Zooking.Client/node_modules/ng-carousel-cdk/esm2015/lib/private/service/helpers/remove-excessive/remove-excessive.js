import { RemoveExcessiveResult } from './models/remove-excessive-result';
/**
 * Removes slides that should not exist in carousel
 * (e.g. copies which are outside viewport)
 */
export function removeExcessive(slides, offset, slideWidth, 
/** First slide index that is inside viewport */
viewportStart, 
/** Last slide index that is inside viewport */
viewportEnd) {
    if (!slides || !slides.length) {
        return new RemoveExcessiveResult([], offset);
    }
    // Validate inputs
    viewportStart = Math.max(0, Math.min(viewportStart, viewportEnd));
    viewportEnd = Math.min(viewportStart, slides.length - 1);
    const rightSlides = [];
    const leftSlides = [];
    const itemIndexes = new Set();
    let newOffset = offset;
    // Next fancy loop traverses through slides array, but in specified order:
    // first we travel through slides in viewport, so we can collect item ids,
    // next we go through right and left side outside viewport, cleaning all
    // found copies. Thus we can cleanse all copies in O(n)
    for (let i = viewportStart; i <= viewportEnd; i++) {
        itemIndexes.add(slides[i].itemIndex);
        rightSlides.push(slides[i]);
    }
    for (let i = viewportEnd + 1; i < slides.length; i++) {
        if (itemIndexes.has(slides[i].itemIndex)) {
            continue;
        }
        itemIndexes.add(slides[i].itemIndex);
        rightSlides.push(slides[i]);
    }
    for (let i = 0; i < viewportStart; i++) {
        if (itemIndexes.has(slides[i].itemIndex)) {
            newOffset += slideWidth;
            continue;
        }
        itemIndexes.add(slides[i].itemIndex);
        leftSlides.push(slides[i]);
    }
    const newSlides = [
        ...leftSlides,
        ...rightSlides,
    ];
    return new RemoveExcessiveResult(newSlides, newOffset);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLWV4Y2Vzc2l2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWNhcm91c2VsL3NyYy9saWIvcHJpdmF0ZS9zZXJ2aWNlL2hlbHBlcnMvcmVtb3ZlLWV4Y2Vzc2l2ZS9yZW1vdmUtZXhjZXNzaXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXpFOzs7R0FHRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQzNCLE1BQXVCLEVBQ3ZCLE1BQWMsRUFDZCxVQUFrQjtBQUNsQixnREFBZ0Q7QUFDaEQsYUFBcUI7QUFDckIsK0NBQStDO0FBQy9DLFdBQW1CO0lBRW5CLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBRTNCLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDaEQ7SUFDRCxrQkFBa0I7SUFDbEIsYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDbEUsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFekQsTUFBTSxXQUFXLEdBQW9CLEVBQUUsQ0FBQztJQUN4QyxNQUFNLFVBQVUsR0FBb0IsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFDdEMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLDBFQUEwRTtJQUMxRSwwRUFBMEU7SUFDMUUsd0VBQXdFO0lBQ3hFLHVEQUF1RDtJQUN2RCxLQUFLLElBQUksQ0FBQyxHQUFHLGFBQWEsRUFBRSxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9DLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbEQsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxTQUFTO1NBQ1o7UUFDRCxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9CO0lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3RDLFNBQVMsSUFBSSxVQUFVLENBQUM7WUFDeEIsU0FBUztTQUNaO1FBQ0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5QjtJQUVELE1BQU0sU0FBUyxHQUFHO1FBQ2QsR0FBRyxVQUFVO1FBQ2IsR0FBRyxXQUFXO0tBQ2pCLENBQUM7SUFFRixPQUFPLElBQUkscUJBQXFCLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXJvdXNlbFNsaWRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL2Nhcm91c2VsLXNsaWRlJztcbmltcG9ydCB7IFJlbW92ZUV4Y2Vzc2l2ZVJlc3VsdCB9IGZyb20gJy4vbW9kZWxzL3JlbW92ZS1leGNlc3NpdmUtcmVzdWx0JztcblxuLyoqXG4gKiBSZW1vdmVzIHNsaWRlcyB0aGF0IHNob3VsZCBub3QgZXhpc3QgaW4gY2Fyb3VzZWxcbiAqIChlLmcuIGNvcGllcyB3aGljaCBhcmUgb3V0c2lkZSB2aWV3cG9ydClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV4Y2Vzc2l2ZShcbiAgICBzbGlkZXM6IENhcm91c2VsU2xpZGVbXSxcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICBzbGlkZVdpZHRoOiBudW1iZXIsXG4gICAgLyoqIEZpcnN0IHNsaWRlIGluZGV4IHRoYXQgaXMgaW5zaWRlIHZpZXdwb3J0ICovXG4gICAgdmlld3BvcnRTdGFydDogbnVtYmVyLFxuICAgIC8qKiBMYXN0IHNsaWRlIGluZGV4IHRoYXQgaXMgaW5zaWRlIHZpZXdwb3J0ICovXG4gICAgdmlld3BvcnRFbmQ6IG51bWJlcixcbik6IFJlbW92ZUV4Y2Vzc2l2ZVJlc3VsdCB7XG4gICAgaWYgKCFzbGlkZXMgfHwgIXNsaWRlcy5sZW5ndGgpIHtcblxuICAgICAgICByZXR1cm4gbmV3IFJlbW92ZUV4Y2Vzc2l2ZVJlc3VsdChbXSwgb2Zmc2V0KTtcbiAgICB9XG4gICAgLy8gVmFsaWRhdGUgaW5wdXRzXG4gICAgdmlld3BvcnRTdGFydCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHZpZXdwb3J0U3RhcnQsIHZpZXdwb3J0RW5kKSk7XG4gICAgdmlld3BvcnRFbmQgPSBNYXRoLm1pbih2aWV3cG9ydFN0YXJ0LCBzbGlkZXMubGVuZ3RoIC0gMSk7XG5cbiAgICBjb25zdCByaWdodFNsaWRlczogQ2Fyb3VzZWxTbGlkZVtdID0gW107XG4gICAgY29uc3QgbGVmdFNsaWRlczogQ2Fyb3VzZWxTbGlkZVtdID0gW107XG4gICAgY29uc3QgaXRlbUluZGV4ZXMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICBsZXQgbmV3T2Zmc2V0ID0gb2Zmc2V0O1xuICAgIC8vIE5leHQgZmFuY3kgbG9vcCB0cmF2ZXJzZXMgdGhyb3VnaCBzbGlkZXMgYXJyYXksIGJ1dCBpbiBzcGVjaWZpZWQgb3JkZXI6XG4gICAgLy8gZmlyc3Qgd2UgdHJhdmVsIHRocm91Z2ggc2xpZGVzIGluIHZpZXdwb3J0LCBzbyB3ZSBjYW4gY29sbGVjdCBpdGVtIGlkcyxcbiAgICAvLyBuZXh0IHdlIGdvIHRocm91Z2ggcmlnaHQgYW5kIGxlZnQgc2lkZSBvdXRzaWRlIHZpZXdwb3J0LCBjbGVhbmluZyBhbGxcbiAgICAvLyBmb3VuZCBjb3BpZXMuIFRodXMgd2UgY2FuIGNsZWFuc2UgYWxsIGNvcGllcyBpbiBPKG4pXG4gICAgZm9yIChsZXQgaSA9IHZpZXdwb3J0U3RhcnQ7IGkgPD0gdmlld3BvcnRFbmQ7IGkrKykge1xuICAgICAgICBpdGVtSW5kZXhlcy5hZGQoc2xpZGVzW2ldLml0ZW1JbmRleCk7XG4gICAgICAgIHJpZ2h0U2xpZGVzLnB1c2goc2xpZGVzW2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IHZpZXdwb3J0RW5kICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXRlbUluZGV4ZXMuaGFzKHNsaWRlc1tpXS5pdGVtSW5kZXgpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtSW5kZXhlcy5hZGQoc2xpZGVzW2ldLml0ZW1JbmRleCk7XG4gICAgICAgIHJpZ2h0U2xpZGVzLnB1c2goc2xpZGVzW2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aWV3cG9ydFN0YXJ0OyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZW1JbmRleGVzLmhhcyhzbGlkZXNbaV0uaXRlbUluZGV4KSkge1xuICAgICAgICAgICAgbmV3T2Zmc2V0ICs9IHNsaWRlV2lkdGg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtSW5kZXhlcy5hZGQoc2xpZGVzW2ldLml0ZW1JbmRleCk7XG4gICAgICAgIGxlZnRTbGlkZXMucHVzaChzbGlkZXNbaV0pO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1NsaWRlcyA9IFtcbiAgICAgICAgLi4ubGVmdFNsaWRlcyxcbiAgICAgICAgLi4ucmlnaHRTbGlkZXMsXG4gICAgXTtcblxuICAgIHJldHVybiBuZXcgUmVtb3ZlRXhjZXNzaXZlUmVzdWx0KG5ld1NsaWRlcywgbmV3T2Zmc2V0KTtcbn1cbiJdfQ==