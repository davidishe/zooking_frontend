import { CarouselAlignMode } from '../../../../carousel-align-mode';
import { CalculateActiveSlideResult } from './models/calculate-active-slide-result';
/**
 * Based on current whereabouts, returns most possible
 * active slide candidate and proposed offset for it
 */
export function calculateActiveSlide(slides, offset, alignMode, slideWidth, viewportWidth, swipeThresholdPercent, 
/** Distance (whether in px or %) that is aligned to carousel width mode */
swipeDistance = null) {
    const result = new CalculateActiveSlideResult(offset, 0);
    // Noop run if nothing to calculate
    if (!slides.length || slideWidth <= 0) {
        return result;
    }
    const slidesSumWidth = slideWidth * slides.length;
    // By given align mode, width mode and viewport width, calculate
    // carousel center position
    const carouselCenter = alignMode === CarouselAlignMode.LEFT
        ? 0
        : viewportWidth / 2;
    // Slide center is not always its left side. On such occasion we should
    // correct its offset using specified align mode.
    const slideRightAmendment = alignMode === CarouselAlignMode.LEFT
        ? slideWidth
        : slideWidth / 2;
    const slideLeftAmendment = alignMode === CarouselAlignMode.LEFT
        ? 0
        : slideRightAmendment;
    // Preset if slides far behind carousel center
    if (offset + slidesSumWidth < carouselCenter) {
        result.slideIndex = slides.length - 1;
        result.modifiedOffset = carouselCenter - slidesSumWidth + slideRightAmendment;
        // Preset if slides far away from carousel center
    }
    else if (offset - slideLeftAmendment > carouselCenter) {
        result.slideIndex = 0;
        result.modifiedOffset = carouselCenter - slideLeftAmendment;
        // Any other cases (when slides intersect carousel center)
    }
    else {
        result.slideIndex = Math.floor(Math.abs(carouselCenter - offset) / slideWidth);
        result.modifiedOffset = carouselCenter - result.slideIndex * slideWidth - slideLeftAmendment;
    }
    // Swipe correction: animation must align with swipe direction meaning
    // when user swipes right, final animation should also lead to the right
    const swipeDirection = Math.sign(swipeDistance);
    const offsetDirection = offset > result.modifiedOffset
        ? -1
        : 1;
    const shouldApplySwipeAlignment = swipeDistance !== null
        && swipeThresholdPercent !== null
        && Math.abs(swipeDistance) > Math.abs(swipeThresholdPercent)
        && swipeDirection !== offsetDirection;
    if (shouldApplySwipeAlignment) {
        const appliedSwipeAlignment = result.slideIndex - swipeDirection;
        const newSlideIndex = Math.min(Math.max(0, appliedSwipeAlignment), slides.length - 1);
        if (newSlideIndex !== result.slideIndex) {
            result.slideIndex = newSlideIndex;
            result.modifiedOffset += swipeDirection * slideWidth;
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlLWFjdGl2ZS1zbGlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWNhcm91c2VsL3NyYy9saWIvcHJpdmF0ZS9zZXJ2aWNlL2hlbHBlcnMvY2FsY3VsYXRlLWFjdGl2ZS1zbGlkZS9jYWxjdWxhdGUtYWN0aXZlLXNsaWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXBFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXBGOzs7R0FHRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FDaEMsTUFBdUIsRUFDdkIsTUFBYyxFQUNkLFNBQTRCLEVBQzVCLFVBQWtCLEVBQ2xCLGFBQXFCLEVBQ3JCLHFCQUFvQztBQUNwQywyRUFBMkU7QUFDM0UsZ0JBQStCLElBQUk7SUFFbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFekQsbUNBQW1DO0lBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFVBQVUsSUFBSSxDQUFDLEVBQUU7UUFFbkMsT0FBTyxNQUFNLENBQUM7S0FDakI7SUFDRCxNQUFNLGNBQWMsR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUVsRCxnRUFBZ0U7SUFDaEUsMkJBQTJCO0lBQzNCLE1BQU0sY0FBYyxHQUFHLFNBQVMsS0FBSyxpQkFBaUIsQ0FBQyxJQUFJO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFFeEIsdUVBQXVFO0lBQ3ZFLGlEQUFpRDtJQUNqRCxNQUFNLG1CQUFtQixHQUFHLFNBQVMsS0FBSyxpQkFBaUIsQ0FBQyxJQUFJO1FBQzVELENBQUMsQ0FBQyxVQUFVO1FBQ1osQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDckIsTUFBTSxrQkFBa0IsR0FBRyxTQUFTLEtBQUssaUJBQWlCLENBQUMsSUFBSTtRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUNILENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztJQUUxQiw4Q0FBOEM7SUFDOUMsSUFBSSxNQUFNLEdBQUcsY0FBYyxHQUFHLGNBQWMsRUFBRTtRQUMxQyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsY0FBYyxHQUFHLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQztRQUVsRixpREFBaUQ7S0FDaEQ7U0FBTSxJQUFJLE1BQU0sR0FBRyxrQkFBa0IsR0FBRyxjQUFjLEVBQUU7UUFDckQsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLGNBQWMsR0FBRyxjQUFjLEdBQUcsa0JBQWtCLENBQUM7UUFFaEUsMERBQTBEO0tBQ3pEO1NBQU07UUFDSCxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDL0UsTUFBTSxDQUFDLGNBQWMsR0FBRyxjQUFjLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsa0JBQWtCLENBQUM7S0FDaEc7SUFFRCxzRUFBc0U7SUFDdEUsd0VBQXdFO0lBQ3hFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDaEQsTUFBTSxlQUFlLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxjQUFjO1FBQ2xELENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsTUFBTSx5QkFBeUIsR0FDM0IsYUFBYSxLQUFLLElBQUk7V0FDbkIscUJBQXFCLEtBQUssSUFBSTtXQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUM7V0FDekQsY0FBYyxLQUFLLGVBQWUsQ0FBQztJQUMxQyxJQUFJLHlCQUF5QixFQUFFO1FBQzNCLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUM7UUFDakUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEYsSUFBSSxhQUFhLEtBQUssTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNyQyxNQUFNLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQztZQUNsQyxNQUFNLENBQUMsY0FBYyxJQUFJLGNBQWMsR0FBRyxVQUFVLENBQUM7U0FDeEQ7S0FDSjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXJvdXNlbEFsaWduTW9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL2Nhcm91c2VsLWFsaWduLW1vZGUnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxTbGlkZSB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9jYXJvdXNlbC1zbGlkZSc7XG5pbXBvcnQgeyBDYWxjdWxhdGVBY3RpdmVTbGlkZVJlc3VsdCB9IGZyb20gJy4vbW9kZWxzL2NhbGN1bGF0ZS1hY3RpdmUtc2xpZGUtcmVzdWx0JztcblxuLyoqXG4gKiBCYXNlZCBvbiBjdXJyZW50IHdoZXJlYWJvdXRzLCByZXR1cm5zIG1vc3QgcG9zc2libGVcbiAqIGFjdGl2ZSBzbGlkZSBjYW5kaWRhdGUgYW5kIHByb3Bvc2VkIG9mZnNldCBmb3IgaXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUFjdGl2ZVNsaWRlKFxuICAgIHNsaWRlczogQ2Fyb3VzZWxTbGlkZVtdLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGFsaWduTW9kZTogQ2Fyb3VzZWxBbGlnbk1vZGUsXG4gICAgc2xpZGVXaWR0aDogbnVtYmVyLFxuICAgIHZpZXdwb3J0V2lkdGg6IG51bWJlcixcbiAgICBzd2lwZVRocmVzaG9sZFBlcmNlbnQ6IG51bWJlciB8IG51bGwsXG4gICAgLyoqIERpc3RhbmNlICh3aGV0aGVyIGluIHB4IG9yICUpIHRoYXQgaXMgYWxpZ25lZCB0byBjYXJvdXNlbCB3aWR0aCBtb2RlICovXG4gICAgc3dpcGVEaXN0YW5jZTogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4pOiBDYWxjdWxhdGVBY3RpdmVTbGlkZVJlc3VsdCB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IENhbGN1bGF0ZUFjdGl2ZVNsaWRlUmVzdWx0KG9mZnNldCwgMCk7XG5cbiAgICAvLyBOb29wIHJ1biBpZiBub3RoaW5nIHRvIGNhbGN1bGF0ZVxuICAgIGlmICghc2xpZGVzLmxlbmd0aCB8fCBzbGlkZVdpZHRoIDw9IDApIHtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBzbGlkZXNTdW1XaWR0aCA9IHNsaWRlV2lkdGggKiBzbGlkZXMubGVuZ3RoO1xuXG4gICAgLy8gQnkgZ2l2ZW4gYWxpZ24gbW9kZSwgd2lkdGggbW9kZSBhbmQgdmlld3BvcnQgd2lkdGgsIGNhbGN1bGF0ZVxuICAgIC8vIGNhcm91c2VsIGNlbnRlciBwb3NpdGlvblxuICAgIGNvbnN0IGNhcm91c2VsQ2VudGVyID0gYWxpZ25Nb2RlID09PSBDYXJvdXNlbEFsaWduTW9kZS5MRUZUXG4gICAgICAgID8gMFxuICAgICAgICA6IHZpZXdwb3J0V2lkdGggLyAyO1xuXG4gICAgLy8gU2xpZGUgY2VudGVyIGlzIG5vdCBhbHdheXMgaXRzIGxlZnQgc2lkZS4gT24gc3VjaCBvY2Nhc2lvbiB3ZSBzaG91bGRcbiAgICAvLyBjb3JyZWN0IGl0cyBvZmZzZXQgdXNpbmcgc3BlY2lmaWVkIGFsaWduIG1vZGUuXG4gICAgY29uc3Qgc2xpZGVSaWdodEFtZW5kbWVudCA9IGFsaWduTW9kZSA9PT0gQ2Fyb3VzZWxBbGlnbk1vZGUuTEVGVFxuICAgICAgICA/IHNsaWRlV2lkdGhcbiAgICAgICAgOiBzbGlkZVdpZHRoIC8gMjtcbiAgICBjb25zdCBzbGlkZUxlZnRBbWVuZG1lbnQgPSBhbGlnbk1vZGUgPT09IENhcm91c2VsQWxpZ25Nb2RlLkxFRlRcbiAgICAgICAgPyAwXG4gICAgICAgIDogc2xpZGVSaWdodEFtZW5kbWVudDtcblxuICAgIC8vIFByZXNldCBpZiBzbGlkZXMgZmFyIGJlaGluZCBjYXJvdXNlbCBjZW50ZXJcbiAgICBpZiAob2Zmc2V0ICsgc2xpZGVzU3VtV2lkdGggPCBjYXJvdXNlbENlbnRlcikge1xuICAgICAgICByZXN1bHQuc2xpZGVJbmRleCA9IHNsaWRlcy5sZW5ndGggLSAxO1xuICAgICAgICByZXN1bHQubW9kaWZpZWRPZmZzZXQgPSBjYXJvdXNlbENlbnRlciAtIHNsaWRlc1N1bVdpZHRoICsgc2xpZGVSaWdodEFtZW5kbWVudDtcblxuICAgIC8vIFByZXNldCBpZiBzbGlkZXMgZmFyIGF3YXkgZnJvbSBjYXJvdXNlbCBjZW50ZXJcbiAgICB9IGVsc2UgaWYgKG9mZnNldCAtIHNsaWRlTGVmdEFtZW5kbWVudCA+IGNhcm91c2VsQ2VudGVyKSB7XG4gICAgICAgIHJlc3VsdC5zbGlkZUluZGV4ID0gMDtcbiAgICAgICAgcmVzdWx0Lm1vZGlmaWVkT2Zmc2V0ID0gY2Fyb3VzZWxDZW50ZXIgLSBzbGlkZUxlZnRBbWVuZG1lbnQ7XG5cbiAgICAvLyBBbnkgb3RoZXIgY2FzZXMgKHdoZW4gc2xpZGVzIGludGVyc2VjdCBjYXJvdXNlbCBjZW50ZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnNsaWRlSW5kZXggPSBNYXRoLmZsb29yKE1hdGguYWJzKGNhcm91c2VsQ2VudGVyIC0gb2Zmc2V0KSAvIHNsaWRlV2lkdGgpO1xuICAgICAgICByZXN1bHQubW9kaWZpZWRPZmZzZXQgPSBjYXJvdXNlbENlbnRlciAtIHJlc3VsdC5zbGlkZUluZGV4ICogc2xpZGVXaWR0aCAtIHNsaWRlTGVmdEFtZW5kbWVudDtcbiAgICB9XG5cbiAgICAvLyBTd2lwZSBjb3JyZWN0aW9uOiBhbmltYXRpb24gbXVzdCBhbGlnbiB3aXRoIHN3aXBlIGRpcmVjdGlvbiBtZWFuaW5nXG4gICAgLy8gd2hlbiB1c2VyIHN3aXBlcyByaWdodCwgZmluYWwgYW5pbWF0aW9uIHNob3VsZCBhbHNvIGxlYWQgdG8gdGhlIHJpZ2h0XG4gICAgY29uc3Qgc3dpcGVEaXJlY3Rpb24gPSBNYXRoLnNpZ24oc3dpcGVEaXN0YW5jZSk7XG4gICAgY29uc3Qgb2Zmc2V0RGlyZWN0aW9uID0gb2Zmc2V0ID4gcmVzdWx0Lm1vZGlmaWVkT2Zmc2V0XG4gICAgICAgID8gLTFcbiAgICAgICAgOiAxO1xuICAgIGNvbnN0IHNob3VsZEFwcGx5U3dpcGVBbGlnbm1lbnQgPVxuICAgICAgICBzd2lwZURpc3RhbmNlICE9PSBudWxsXG4gICAgICAgICYmIHN3aXBlVGhyZXNob2xkUGVyY2VudCAhPT0gbnVsbFxuICAgICAgICAmJiBNYXRoLmFicyhzd2lwZURpc3RhbmNlKSA+IE1hdGguYWJzKHN3aXBlVGhyZXNob2xkUGVyY2VudClcbiAgICAgICAgJiYgc3dpcGVEaXJlY3Rpb24gIT09IG9mZnNldERpcmVjdGlvbjtcbiAgICBpZiAoc2hvdWxkQXBwbHlTd2lwZUFsaWdubWVudCkge1xuICAgICAgICBjb25zdCBhcHBsaWVkU3dpcGVBbGlnbm1lbnQgPSByZXN1bHQuc2xpZGVJbmRleCAtIHN3aXBlRGlyZWN0aW9uO1xuICAgICAgICBjb25zdCBuZXdTbGlkZUluZGV4ID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgYXBwbGllZFN3aXBlQWxpZ25tZW50KSwgc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICBpZiAobmV3U2xpZGVJbmRleCAhPT0gcmVzdWx0LnNsaWRlSW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zbGlkZUluZGV4ID0gbmV3U2xpZGVJbmRleDtcbiAgICAgICAgICAgIHJlc3VsdC5tb2RpZmllZE9mZnNldCArPSBzd2lwZURpcmVjdGlvbiAqIHNsaWRlV2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl19