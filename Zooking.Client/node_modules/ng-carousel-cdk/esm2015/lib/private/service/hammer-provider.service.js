import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, isDevMode, PLATFORM_ID } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class HammerProviderService {
    constructor(
    // tslint:disable-next-line: ban-types
    platformId) {
        this.platformId = platformId;
        this.hammerAbsenceDeclared = false;
    }
    managerFor(element) {
        const hasGestures = isPlatformBrowser(this.platformId) && window.Hammer;
        if (!hasGestures) {
            if (isDevMode() && !this.hammerAbsenceDeclared) {
                console.warn('Ng-carousel could not listen to drag, because HammerJS was not found. Either disable drag or import HammerJS.');
                this.hammerAbsenceDeclared = true;
            }
            return null;
        }
        const hammerManager = new Hammer(element);
        return hammerManager;
    }
}
HammerProviderService.ɵfac = function HammerProviderService_Factory(t) { return new (t || HammerProviderService)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };
HammerProviderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HammerProviderService_Factory() { return new HammerProviderService(i0.ɵɵinject(i0.PLATFORM_ID)); }, token: HammerProviderService, providedIn: "root" });
HammerProviderService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HammerProviderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFtbWVyLXByb3ZpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWNhcm91c2VsL3NyYy9saWIvcHJpdmF0ZS9zZXJ2aWNlL2hhbW1lci1wcm92aWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0U7O0FBSUEsTUFBTSxPQUFPLHFCQUFxQjtBQUNsQyxJQUdJO0FBQ0osSUFBUSxzQ0FBc0M7QUFDOUMsSUFBcUMsVUFBa0I7QUFDckQsUUFEbUMsZUFBVSxHQUFWLFVBQVUsQ0FBUTtBQUFDLFFBSjVDLDBCQUFxQixHQUFHLEtBQUssQ0FBQztBQUMxQyxJQUtJLENBQUM7QUFDTCxJQUNXLFVBQVUsQ0FBQyxPQUFvQjtBQUFJLFFBQ3RDLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSyxNQUFjLENBQUMsTUFBTSxDQUFDO0FBQ3pGLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUMxQixZQUFZLElBQUksU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7QUFDNUQsZ0JBQWdCLE9BQU8sQ0FBQyxJQUFJLENBQ1IsK0dBQStHLENBQ2xILENBQUM7QUFDbEIsZ0JBQWdCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7QUFDbEQsYUFBYTtBQUNiLFlBQ1ksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQVEsTUFBTSxhQUFhLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEQsUUFDUSxPQUFPLGFBQWEsQ0FBQztBQUM3QixJQUFJLENBQUM7QUFDTDtrSkFBQztBQUNELGdPQTNCSztBQUFDO0VBSEwsVUFBVSxTQUFDLGtCQUNSLFVBQVUsRUFBRSxNQUFNLGVBQ3JCLHhFQUdjLFlBSWtDLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxXQUFXO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBpc0Rldk1vZGUsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEhhbW1lclByb3ZpZGVyU2VydmljZSB7XG5cbiAgICBwcml2YXRlIGhhbW1lckFic2VuY2VEZWNsYXJlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogYmFuLXR5cGVzXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgICkge1xuICAgIH1cblxuICAgIHB1YmxpYyBtYW5hZ2VyRm9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogSGFtbWVyTWFuYWdlciB8IG51bGwge1xuICAgICAgICBjb25zdCBoYXNHZXN0dXJlcyA9IGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkgJiYgKHdpbmRvdyBhcyBhbnkpLkhhbW1lcjtcbiAgICAgICAgaWYgKCFoYXNHZXN0dXJlcykge1xuICAgICAgICAgICAgaWYgKGlzRGV2TW9kZSgpICYmICF0aGlzLmhhbW1lckFic2VuY2VEZWNsYXJlZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgJ05nLWNhcm91c2VsIGNvdWxkIG5vdCBsaXN0ZW4gdG8gZHJhZywgYmVjYXVzZSBIYW1tZXJKUyB3YXMgbm90IGZvdW5kLiBFaXRoZXIgZGlzYWJsZSBkcmFnIG9yIGltcG9ydCBIYW1tZXJKUy4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbW1lckFic2VuY2VEZWNsYXJlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbW1lck1hbmFnZXIgPSBuZXcgSGFtbWVyKGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiBoYW1tZXJNYW5hZ2VyO1xuICAgIH1cbn1cbiJdfQ==