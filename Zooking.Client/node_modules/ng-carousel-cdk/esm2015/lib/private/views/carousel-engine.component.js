import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, Inject, PLATFORM_ID, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMapTo, takeUntil } from 'rxjs/operators';
import { CarouselSlideContext } from '../models/carousel-slide-context';
import { CarouselService } from '../service/carousel.service';
import { HammerProviderService } from '../service/hammer-provider.service';
/**
 * Contains listeners and other DOM controllers
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../service/carousel.service';
import * as ɵngcc2 from '../service/hammer-provider.service';
import * as ɵngcc3 from '@angular/cdk/a11y';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '../directives/untabbable.directive';

const _c0 = ["galleryRef"];
function CarouselEngineComponent_li_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function CarouselEngineComponent_li_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtemplate(2, CarouselEngineComponent_li_4_ng_container_2_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const slide_r3 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵstyleProp("width", ɵngcc0.ɵɵpipeBind1(1, 7, ctx_r2.slideWidth$));
    ɵngcc0.ɵɵproperty("untabbable", !slide_r3.options.isActive)("untabbableFocusTrapRef", _r1)("untabbableFocused", ctx_r2.focused);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ɵngcc0.ɵɵpipeBind1(3, 9, ctx_r2.template$))("ngTemplateOutletContext", ctx_r2.contextOf(slide_r3));
} }
export class CarouselEngineComponent {
    constructor(carousel, elementRef, renderer, hammer, 
    // tslint:disable-next-line: ban-types
    platformId) {
        this.carousel = carousel;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.hammer = hammer;
        this.platformId = platformId;
        this.transformValue$ = this.transformValueChanges();
        this.slideWidth$ = this.slideWidthChanges();
        this.template$ = this.templateChanges();
        this.slides$ = this.slidesChanges();
        this.focused = false;
        this.destroyed$ = new Subject();
    }
    get htmlElement() {
        return this.elementRef.nativeElement;
    }
    ngOnInit() {
        this.listenToAutoplay();
        this.listenToDragEvents();
        this.listenToResizeEvents();
        this.listenToKeyEvents();
        this.listenToScrollEvents();
        this.carousel.setContainers(this.htmlElement, this.galleryRef.nativeElement);
    }
    ngOnDestroy() {
        this.destroyMouseListeners();
        this.destroyHammer();
        this.destroyKeyboardListeners();
        this.destroyElementScrollListener();
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    trackByFn(index, item) {
        return item.id;
    }
    contextOf(slide) {
        return new CarouselSlideContext(slide.options.item, slide.itemIndex, slide.options.isActive, slide.options.inViewport);
    }
    focusIn() {
        this.focused = true;
        this.carousel.disableAutoplay("focus" /* FOCUS */);
    }
    focusOut() {
        this.focused = false;
        this.carousel.enableAutoplay("focus" /* FOCUS */);
    }
    destroyMouseListeners() {
        if (this.mouseEnterDestructor) {
            this.mouseEnterDestructor();
        }
        if (this.mouseLeaveDestructor) {
            this.mouseLeaveDestructor();
        }
    }
    destroyHammer() {
        if (this.hammerManager) {
            this.hammerManager.destroy();
        }
    }
    destroyKeyboardListeners() {
        if (this.keyboardListener) {
            this.keyboardListener();
        }
    }
    destroyElementScrollListener() {
        if (this.containerScrollListener) {
            this.containerScrollListener();
        }
    }
    transformValueChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => `translateX(${state.offset}${state.config.widthMode})`));
    }
    slideWidthChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => `${state.config.slideWidth}${state.config.widthMode}`));
    }
    slidesChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => state.slides));
    }
    templateChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => state.template));
    }
    listenToAutoplay() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.carousel.carouselStateChanges()
            .pipe(map((state) => state.config.autoplayEnabled), distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe((autoplayEnabled) => {
            if (this.mouseEnterDestructor) {
                this.mouseEnterDestructor();
            }
            if (this.mouseLeaveDestructor) {
                this.mouseLeaveDestructor();
            }
            if (!autoplayEnabled) {
                return;
            }
            this.mouseEnterDestructor = this.renderer.listen(this.htmlElement, 'mouseenter', () => this.carousel.disableAutoplay("mouse" /* MOUSE */));
            this.mouseLeaveDestructor = this.renderer.listen(this.htmlElement, 'mouseleave', () => this.carousel.enableAutoplay("mouse" /* MOUSE */));
        });
    }
    listenToDragEvents() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.carousel.carouselStateChanges()
            .pipe(map((state) => state.config.dragEnabled), distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe((dragEnabled) => {
            if (this.hammerManager) {
                this.hammerManager.destroy();
            }
            if (!dragEnabled) {
                return;
            }
            this.hammerManager = this.hammer.managerFor(this.htmlElement);
            if (!this.hammerManager) {
                return;
            }
            let lastDelta = 0;
            let lastTouchAction;
            this.hammerManager.on('panstart', (event) => {
                // Checking whether pan started with horizontal gesture,
                // we should block all scroll attempts during current pan session then
                // tslint:disable-next-line: no-bitwise
                if (event.offsetDirection & Hammer.DIRECTION_HORIZONTAL) {
                    lastDelta = Math.round(event.deltaX);
                    this.carousel.dragStart();
                    lastTouchAction = this.htmlElement.style.touchAction;
                    this.renderer.setStyle(this.htmlElement, 'touch-action', 'none');
                }
            });
            this.hammerManager.on('panright panleft', (event) => {
                // We should not treat vertical pans as horizontal.
                // Be adviced that pan right/left events still counts
                // vertical pans as legitimate horizontal pan.
                // Next check clarifies that initial gesture was horizontal,
                // otherwise this variable would be falsy
                if (lastTouchAction) {
                    const x = Math.round(event.center.x);
                    const deltaX = Math.round(event.deltaX);
                    this.carousel.drag(x, x + (deltaX - lastDelta));
                    lastDelta = deltaX;
                }
            });
            this.hammerManager.on('panend pancancel', (event) => {
                if (lastTouchAction) {
                    this.carousel.dragEnd(event.deltaX);
                    this.renderer.setStyle(this.htmlElement, 'touch-action', lastTouchAction);
                    lastTouchAction = null;
                }
            });
        });
    }
    listenToResizeEvents() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.carousel.carouselStateChanges()
            .pipe(filter((state) => state.config.shouldRecalculateOnResize), switchMapTo(fromEvent(window, 'resize')), takeUntil(this.destroyed$))
            .subscribe(() => {
            this.carousel.recalculate();
        });
    }
    listenToKeyEvents() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.keyboardListener = this.renderer.listen(this.htmlElement, 'keydown', (event) => {
            const key = event.key.toLowerCase();
            if (['arrowright', 'right'].includes(key)) {
                this.carousel.next();
            }
            else if (['arrowleft', 'left'].includes(key)) {
                this.carousel.prev();
            }
        });
    }
    /**
     * Horizontal scroll might accidentaly happen on parent container
     * when pressing arrow buttons too fast. We should return
     * container to initial position when that happens.
     */
    listenToScrollEvents() {
        this.containerScrollListener = this.renderer.listen(this.htmlElement, 'scroll', () => {
            this.htmlElement.scrollTo(0, 0);
        });
    }
}
CarouselEngineComponent.ɵfac = function CarouselEngineComponent_Factory(t) { return new (t || CarouselEngineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CarouselService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.HammerProviderService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
CarouselEngineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CarouselEngineComponent, selectors: [["carousel-engine"]], viewQuery: function CarouselEngineComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.galleryRef = _t.first);
    } }, decls: 6, vars: 9, consts: [[1, "ng-carousel-block", 3, "cdkTrapFocus", "focusin", "focusout"], ["galleryRef", "", "focusTrapRef", "cdkTrapFocus"], ["class", "ng-carousel-slide", 3, "width", "untabbable", "untabbableFocusTrapRef", "untabbableFocused", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "ng-carousel-slide", 3, "untabbable", "untabbableFocusTrapRef", "untabbableFocused"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function CarouselEngineComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0, 1);
        ɵngcc0.ɵɵlistener("focusin", function CarouselEngineComponent_Template_ul_focusin_0_listener() { return ctx.focusIn(); })("focusout", function CarouselEngineComponent_Template_ul_focusout_0_listener() { return ctx.focusOut(); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtemplate(4, CarouselEngineComponent_li_4_Template, 4, 11, "li", 2);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("transform", ɵngcc0.ɵɵpipeBind1(3, 5, ctx.transformValue$));
        ɵngcc0.ɵɵproperty("cdkTrapFocus", false);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(5, 7, ctx.slides$))("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc3.CdkTrapFocus, ɵngcc4.NgForOf, ɵngcc5.FocusBlockDirective, ɵngcc4.NgTemplateOutlet], pipes: [ɵngcc4.AsyncPipe], styles: [".ng-carousel-block{display:flex;margin:0;padding:0;width:100%;will-change:transform}.ng-carousel-slide{flex:none;list-style:none}"], encapsulation: 2, changeDetection: 0 });
CarouselEngineComponent.ctorParameters = () => [
    { type: CarouselService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: HammerProviderService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
CarouselEngineComponent.propDecorators = {
    galleryRef: [{ type: ViewChild, args: ['galleryRef', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CarouselEngineComponent, [{
        type: Component,
        args: [{
                selector: 'carousel-engine',
                template: "<ul \n    #galleryRef\n    #focusTrapRef=\"cdkTrapFocus\"\n    [style.transform]=\"transformValue$ | async\"\n    [cdkTrapFocus]=\"false\"\n    (focusin)=\"focusIn()\"\n    (focusout)=\"focusOut()\"\n    class=\"ng-carousel-block\">\n    <li\n        *ngFor=\"let slide of (slides$ | async); trackBy: trackByFn;\"\n        [style.width]=\"slideWidth$ | async\"\n        [untabbable]=\"!slide.options.isActive\"\n        [untabbableFocusTrapRef]=\"focusTrapRef\"\n        [untabbableFocused]=\"focused\"\n        class=\"ng-carousel-slide\">\n        <ng-container *ngTemplateOutlet=\"(template$ | async); context: contextOf(slide);\"></ng-container>\n    </li>\n</ul>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".ng-carousel-block{display:flex;margin:0;padding:0;width:100%;will-change:transform}.ng-carousel-slide{flex:none;list-style:none}"]
            }]
    }], function () { return [{ type: ɵngcc1.CarouselService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.HammerProviderService }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { galleryRef: [{
            type: ViewChild,
            args: ['galleryRef', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,