import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, Inject, PLATFORM_ID, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMapTo, takeUntil } from 'rxjs/operators';
import { CarouselSlideContext } from '../models/carousel-slide-context';
import { CarouselService } from '../service/carousel.service';
import { HammerProviderService } from '../service/hammer-provider.service';
/**
 * Contains listeners and other DOM controllers
 */
export class CarouselEngineComponent {
    constructor(carousel, elementRef, renderer, hammer, 
    // tslint:disable-next-line: ban-types
    platformId) {
        this.carousel = carousel;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.hammer = hammer;
        this.platformId = platformId;
        this.transformValue$ = this.transformValueChanges();
        this.slideWidth$ = this.slideWidthChanges();
        this.template$ = this.templateChanges();
        this.slides$ = this.slidesChanges();
        this.focused = false;
        this.destroyed$ = new Subject();
    }
    get htmlElement() {
        return this.elementRef.nativeElement;
    }
    ngOnInit() {
        this.listenToAutoplay();
        this.listenToDragEvents();
        this.listenToResizeEvents();
        this.listenToKeyEvents();
        this.listenToScrollEvents();
        this.carousel.setContainers(this.htmlElement, this.galleryRef.nativeElement);
    }
    ngOnDestroy() {
        this.destroyMouseListeners();
        this.destroyHammer();
        this.destroyKeyboardListeners();
        this.destroyElementScrollListener();
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    trackByFn(index, item) {
        return item.id;
    }
    contextOf(slide) {
        return new CarouselSlideContext(slide.options.item, slide.itemIndex, slide.options.isActive, slide.options.inViewport);
    }
    focusIn() {
        this.focused = true;
        this.carousel.disableAutoplay("focus" /* FOCUS */);
    }
    focusOut() {
        this.focused = false;
        this.carousel.enableAutoplay("focus" /* FOCUS */);
    }
    destroyMouseListeners() {
        if (this.mouseEnterDestructor) {
            this.mouseEnterDestructor();
        }
        if (this.mouseLeaveDestructor) {
            this.mouseLeaveDestructor();
        }
    }
    destroyHammer() {
        if (this.hammerManager) {
            this.hammerManager.destroy();
        }
    }
    destroyKeyboardListeners() {
        if (this.keyboardListener) {
            this.keyboardListener();
        }
    }
    destroyElementScrollListener() {
        if (this.containerScrollListener) {
            this.containerScrollListener();
        }
    }
    transformValueChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => `translateX(${state.offset}${state.config.widthMode})`));
    }
    slideWidthChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => `${state.config.slideWidth}${state.config.widthMode}`));
    }
    slidesChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => state.slides));
    }
    templateChanges() {
        return this.carousel.carouselStateChanges()
            .pipe(map((state) => state.template));
    }
    listenToAutoplay() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.carousel.carouselStateChanges()
            .pipe(map((state) => state.config.autoplayEnabled), distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe((autoplayEnabled) => {
            if (this.mouseEnterDestructor) {
                this.mouseEnterDestructor();
            }
            if (this.mouseLeaveDestructor) {
                this.mouseLeaveDestructor();
            }
            if (!autoplayEnabled) {
                return;
            }
            this.mouseEnterDestructor = this.renderer.listen(this.htmlElement, 'mouseenter', () => this.carousel.disableAutoplay("mouse" /* MOUSE */));
            this.mouseLeaveDestructor = this.renderer.listen(this.htmlElement, 'mouseleave', () => this.carousel.enableAutoplay("mouse" /* MOUSE */));
        });
    }
    listenToDragEvents() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.carousel.carouselStateChanges()
            .pipe(map((state) => state.config.dragEnabled), distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe((dragEnabled) => {
            if (this.hammerManager) {
                this.hammerManager.destroy();
            }
            if (!dragEnabled) {
                return;
            }
            this.hammerManager = this.hammer.managerFor(this.htmlElement);
            if (!this.hammerManager) {
                return;
            }
            let lastDelta = 0;
            let lastTouchAction;
            this.hammerManager.on('panstart', (event) => {
                // Checking whether pan started with horizontal gesture,
                // we should block all scroll attempts during current pan session then
                // tslint:disable-next-line: no-bitwise
                if (event.offsetDirection & Hammer.DIRECTION_HORIZONTAL) {
                    lastDelta = Math.round(event.deltaX);
                    this.carousel.dragStart();
                    lastTouchAction = this.htmlElement.style.touchAction;
                    this.renderer.setStyle(this.htmlElement, 'touch-action', 'none');
                }
            });
            this.hammerManager.on('panright panleft', (event) => {
                // We should not treat vertical pans as horizontal.
                // Be adviced that pan right/left events still counts
                // vertical pans as legitimate horizontal pan.
                // Next check clarifies that initial gesture was horizontal,
                // otherwise this variable would be falsy
                if (lastTouchAction) {
                    const x = Math.round(event.center.x);
                    const deltaX = Math.round(event.deltaX);
                    this.carousel.drag(x, x + (deltaX - lastDelta));
                    lastDelta = deltaX;
                }
            });
            this.hammerManager.on('panend pancancel', (event) => {
                if (lastTouchAction) {
                    this.carousel.dragEnd(event.deltaX);
                    this.renderer.setStyle(this.htmlElement, 'touch-action', lastTouchAction);
                    lastTouchAction = null;
                }
            });
        });
    }
    listenToResizeEvents() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.carousel.carouselStateChanges()
            .pipe(filter((state) => state.config.shouldRecalculateOnResize), switchMapTo(fromEvent(window, 'resize')), takeUntil(this.destroyed$))
            .subscribe(() => {
            this.carousel.recalculate();
        });
    }
    listenToKeyEvents() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        this.keyboardListener = this.renderer.listen(this.htmlElement, 'keydown', (event) => {
            const key = event.key.toLowerCase();
            if (['arrowright', 'right'].includes(key)) {
                this.carousel.next();
            }
            else if (['arrowleft', 'left'].includes(key)) {
                this.carousel.prev();
            }
        });
    }
    /**
     * Horizontal scroll might accidentaly happen on parent container
     * when pressing arrow buttons too fast. We should return
     * container to initial position when that happens.
     */
    listenToScrollEvents() {
        this.containerScrollListener = this.renderer.listen(this.htmlElement, 'scroll', () => {
            this.htmlElement.scrollTo(0, 0);
        });
    }
}
CarouselEngineComponent.decorators = [
    { type: Component, args: [{
                selector: 'carousel-engine',
                template: "<ul \n    #galleryRef\n    #focusTrapRef=\"cdkTrapFocus\"\n    [style.transform]=\"transformValue$ | async\"\n    [cdkTrapFocus]=\"false\"\n    (focusin)=\"focusIn()\"\n    (focusout)=\"focusOut()\"\n    class=\"ng-carousel-block\">\n    <li\n        *ngFor=\"let slide of (slides$ | async); trackBy: trackByFn;\"\n        [style.width]=\"slideWidth$ | async\"\n        [untabbable]=\"!slide.options.isActive\"\n        [untabbableFocusTrapRef]=\"focusTrapRef\"\n        [untabbableFocused]=\"focused\"\n        class=\"ng-carousel-slide\">\n        <ng-container *ngTemplateOutlet=\"(template$ | async); context: contextOf(slide);\"></ng-container>\n    </li>\n</ul>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".ng-carousel-block{display:flex;margin:0;padding:0;width:100%;will-change:transform}.ng-carousel-slide{flex:none;list-style:none}"]
            },] }
];
CarouselEngineComponent.ctorParameters = () => [
    { type: CarouselService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: HammerProviderService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
CarouselEngineComponent.propDecorators = {
    galleryRef: [{ type: ViewChild, args: ['galleryRef', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,