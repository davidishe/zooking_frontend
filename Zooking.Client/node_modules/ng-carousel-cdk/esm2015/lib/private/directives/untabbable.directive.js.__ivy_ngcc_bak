import { CdkTrapFocus, InteractivityChecker } from '@angular/cdk/a11y';
import { Directive, ElementRef, Input } from '@angular/core';
/**
 * Applies tabindex=-1 for interactive elements inside container
 */
export class FocusBlockDirective {
    constructor(elementRef, interactivityChecker) {
        this.elementRef = elementRef;
        this.interactivityChecker = interactivityChecker;
        this.untabbable = false;
        /** Whether focus inside carousel */
        this.untabbableFocused = false;
        this.lastTabindexValueMap = new Map();
    }
    ngOnChanges(changes) {
        if (changes.untabbable && this.viewInitiated) {
            const change = changes.untabbable;
            if (change.currentValue === change.previousValue) {
                return;
            }
            change.currentValue
                ? this.blockTabindex()
                : this.unblockTabindex();
            if (this.untabbableFocused && this.untabbableFocusTrapRef) {
                this.untabbableFocusTrapRef.focusTrap.focusFirstTabbableElement();
            }
        }
    }
    ngAfterViewInit() {
        this.viewInitiated = true;
        this.untabbable
            ? this.blockTabindex()
            : this.unblockTabindex();
    }
    ngOnDestroy() {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
    }
    blockTabindex() {
        const elements = Array.from(this.elementRef.nativeElement.querySelectorAll('*'));
        for (const element of elements) {
            this.blockElement(element);
        }
        if (typeof window !== 'undefined' && 'MutationObserver' in window) {
            this.mutationObserver = new MutationObserver((mutationList) => {
                const changesArray = Array.from(mutationList);
                for (const change of changesArray) {
                    if (change.type === 'attributes') {
                        this.blockElement(change.target);
                    }
                    else if (change.type === 'childList') {
                        change.addedNodes.forEach((element) => {
                            this.blockElement(element);
                        });
                    }
                }
            });
            this.mutationObserver.observe(this.elementRef.nativeElement, {
                attributeFilter: ['tabindex'],
                attributes: true,
                childList: true,
                subtree: true,
            });
        }
    }
    unblockTabindex() {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        const elements = Array.from(this.elementRef.nativeElement.querySelectorAll('*'));
        for (const element of elements) {
            this.unblockElement(element);
        }
    }
    blockElement(element) {
        // nodeType is text node, should not be blocked
        if (element.nodeType !== 3 && this.interactivityChecker.isFocusable(element) && this.interactivityChecker.isTabbable(element)) {
            const currentTabindexValue = element.getAttribute('tabindex');
            this.lastTabindexValueMap.set(element, currentTabindexValue);
            if (currentTabindexValue !== '-1') {
                element.setAttribute('tabindex', '-1');
            }
        }
    }
    unblockElement(element) {
        if (this.lastTabindexValueMap.has(element) && typeof this.lastTabindexValueMap.get(element) === 'number') {
            element.setAttribute('tabindex', this.lastTabindexValueMap.get(element));
        }
        else {
            element.removeAttribute('tabindex');
        }
    }
}
FocusBlockDirective.decorators = [
    { type: Directive, args: [{
                selector: '[untabbable]',
            },] }
];
FocusBlockDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: InteractivityChecker }
];
FocusBlockDirective.propDecorators = {
    untabbable: [{ type: Input }],
    untabbableFocusTrapRef: [{ type: Input }],
    untabbableFocused: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,