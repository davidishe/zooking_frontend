import { ChangeDetectionStrategy, Component, ContentChild, Input, Output, ViewEncapsulation } from '@angular/core';
import { map } from 'rxjs/operators';
import { CarouselConfig } from './carousel-config';
import { CarouselSlideDirective } from './carousel-slide.directive';
import { IdGenerator } from './private/models/id-generator';
import { CarouselService } from './private/service/carousel.service';
import { ANIMATION_ID_GENERATOR, SLIDE_ID_GENERATOR } from './private/tokens';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './private/service/carousel.service';
import * as ɵngcc2 from './private/views/carousel-engine.component';
export function idGeneratorFactory() {
    return new IdGenerator();
}
/**
 * Defines carousel API to work with
 */
export class CarouselComponent {
    constructor(carousel) {
        this.carousel = carousel;
        this.itemIndexChange = this.carousel.carouselStateChanges()
            .pipe(map((state) => state.activeItemIndex));
    }
    set slideRef(newSlideRef) {
        this.carousel.setSlideTemplate(newSlideRef
            ? newSlideRef.templateRef
            : null);
    }
    set config(newConfig) {
        newConfig = new CarouselConfig(newConfig);
        this.carousel.setConfig(newConfig);
    }
    next() {
        this.carousel.next();
    }
    prev() {
        this.carousel.prev();
    }
    setIndex(newIndex) {
        this.carousel.setItemIndex(newIndex);
    }
    /**
     * Programmaticaly recalculates carousel position in case of
     * container size changes or other size interactions
     */
    recalculate() {
        this.carousel.recalculate();
    }
}
CarouselComponent.ɵfac = function CarouselComponent_Factory(t) { return new (t || CarouselComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CarouselService)); };
CarouselComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CarouselComponent, selectors: [["ng-carousel"]], contentQueries: function CarouselComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CarouselSlideDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideRef = _t.first);
    } }, inputs: { config: "config" }, outputs: { itemIndexChange: "itemIndexChange" }, exportAs: ["ngCarousel"], features: [ɵngcc0.ɵɵProvidersFeature([
            CarouselService,
            {
                provide: SLIDE_ID_GENERATOR,
                useFactory: idGeneratorFactory
            },
            {
                provide: ANIMATION_ID_GENERATOR,
                useFactory: idGeneratorFactory
            },
        ])], decls: 1, vars: 0, consts: [[1, "carousel-engine"]], template: function CarouselComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "carousel-engine", 0);
    } }, directives: [ɵngcc2.CarouselEngineComponent], styles: [".carousel-engine{display:block;overflow:hidden;width:100%}"], encapsulation: 2, changeDetection: 0 });
CarouselComponent.ctorParameters = () => [
    { type: CarouselService }
];
CarouselComponent.propDecorators = {
    slideRef: [{ type: ContentChild, args: [CarouselSlideDirective,] }],
    config: [{ type: Input }],
    itemIndexChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CarouselComponent, [{
        type: Component,
        args: [{
                selector: 'ng-carousel',
                template: "<carousel-engine class=\"carousel-engine\"></carousel-engine>\n",
                providers: [
                    CarouselService,
                    {
                        provide: SLIDE_ID_GENERATOR,
                        useFactory: idGeneratorFactory
                    },
                    {
                        provide: ANIMATION_ID_GENERATOR,
                        useFactory: idGeneratorFactory
                    },
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                exportAs: 'ngCarousel',
                styles: [".carousel-engine{display:block;overflow:hidden;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.CarouselService }]; }, { itemIndexChange: [{
            type: Output
        }], slideRef: [{
            type: ContentChild,
            args: [CarouselSlideDirective]
        }], config: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1jYXJvdXNlbC9zcmMvbGliL2Nhcm91c2VsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUU5RSxNQUFNLFVBQVUsa0JBQWtCO0FBQUssSUFDbkMsT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFxQkQ7QUFDQTtBQUNBLEdBQUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBa0JJLFlBQ1ksUUFBeUI7QUFDdkMsUUFEYyxhQUFRLEdBQVIsUUFBUSxDQUFpQjtBQUFDLFFBTjVCLG9CQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtBQUNwRSxhQUFTLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxLQUFvQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQ3ZELENBQUM7QUFDVixJQUlJLENBQUM7QUFDTCxJQXJCSSxJQUEwQyxRQUFRLENBQUMsV0FBbUM7QUFDMUYsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFdBQVc7QUFDbEQsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVc7QUFDckMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNULENBQUM7QUFDVixJQUFJLENBQUM7QUFDTCxJQUNJLElBQWEsTUFBTSxDQUFDLFNBQXlCO0FBQ2pELFFBQVEsU0FBUyxHQUFHLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xELFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0MsSUFBSSxDQUFDO0FBQ0wsSUFXSSxJQUFJO0FBQUssUUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzdCLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSTtBQUFLLFFBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QixJQUFJLENBQUM7QUFDTCxJQUNJLFFBQVEsQ0FBQyxRQUFnQjtBQUFJLFFBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLElBQUksQ0FBQztBQUNMLElBQ0k7QUFDSjtBQUNBO0FBQ0EsT0FBTztBQUNQLElBQUksV0FBVztBQUFLLFFBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNwQyxJQUFJLENBQUM7QUFDTDs2Q0FqRUMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxhQUFhLGtCQUN2QjswQ0FBc0Msa0JBRXRDLFNBQVMsRUFBRSxzQkFDUCxlQUFlLHNCQUNmLDBCQUNJLE9BQU8sRUFBRSxrQkFBa0I7U0FDM0IsVUFBVSxFQUFFLGtCQUFrQix1QkFDakM7YUFDRDs7R0FDSSxPQUFPLEVBQUUsc0JBQXNCLDBCQUMvQixVQUFVLEVBQUU7R0FBa0IsdUJBQ2pDLG1CQUNKLGtCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLGtCQUMvQyxhQUFhLEVBQUU7T0FBaUIsQ0FBQyxJQUFJO0NBQ3JDLFFBQVEsRUFBRTtTQUFZOzs7SUFDekI7Ozs7Ozt1S0FFQTtBQUFDO0FBRUUsWUE3QkssZUFBZTtBQUFHO0FBQUc7QUFBcUMsdUJBK0I5RCxZQUFZLFNBQUMsc0JBQXNCO0FBQU8scUJBTzFDLEtBQUs7QUFBSyw4QkFLVixNQUFNO0FBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIElucHV0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IENhcm91c2VsQ29uZmlnIH0gZnJvbSAnLi9jYXJvdXNlbC1jb25maWcnO1xuaW1wb3J0IHsgQ2Fyb3VzZWxTbGlkZURpcmVjdGl2ZSB9IGZyb20gJy4vY2Fyb3VzZWwtc2xpZGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IENhcm91c2VsU3RhdGUgfSBmcm9tICcuL3ByaXZhdGUvbW9kZWxzL2Nhcm91c2VsLXN0YXRlJztcbmltcG9ydCB7IElkR2VuZXJhdG9yIH0gZnJvbSAnLi9wcml2YXRlL21vZGVscy9pZC1nZW5lcmF0b3InO1xuaW1wb3J0IHsgQ2Fyb3VzZWxTZXJ2aWNlIH0gZnJvbSAnLi9wcml2YXRlL3NlcnZpY2UvY2Fyb3VzZWwuc2VydmljZSc7XG5pbXBvcnQgeyBBTklNQVRJT05fSURfR0VORVJBVE9SLCBTTElERV9JRF9HRU5FUkFUT1IgfSBmcm9tICcuL3ByaXZhdGUvdG9rZW5zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlkR2VuZXJhdG9yRmFjdG9yeSgpOiBJZEdlbmVyYXRvciB7XG4gICAgcmV0dXJuIG5ldyBJZEdlbmVyYXRvcigpO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25nLWNhcm91c2VsJyxcbiAgICB0ZW1wbGF0ZVVybDogJ2Nhcm91c2VsLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnY2Fyb3VzZWwuY29tcG9uZW50LnNjc3MnXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQ2Fyb3VzZWxTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBTTElERV9JRF9HRU5FUkFUT1IsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBpZEdlbmVyYXRvckZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEFOSU1BVElPTl9JRF9HRU5FUkFUT1IsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBpZEdlbmVyYXRvckZhY3RvcnksXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGV4cG9ydEFzOiAnbmdDYXJvdXNlbCcsXG59KVxuLyoqXG4gKiBEZWZpbmVzIGNhcm91c2VsIEFQSSB0byB3b3JrIHdpdGhcbiAqL1xuZXhwb3J0IGNsYXNzIENhcm91c2VsQ29tcG9uZW50IHtcblxuICAgIEBDb250ZW50Q2hpbGQoQ2Fyb3VzZWxTbGlkZURpcmVjdGl2ZSkgc2V0IHNsaWRlUmVmKG5ld1NsaWRlUmVmOiBDYXJvdXNlbFNsaWRlRGlyZWN0aXZlKSB7XG4gICAgICAgIHRoaXMuY2Fyb3VzZWwuc2V0U2xpZGVUZW1wbGF0ZShuZXdTbGlkZVJlZlxuICAgICAgICAgICAgPyBuZXdTbGlkZVJlZi50ZW1wbGF0ZVJlZlxuICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQElucHV0KCkgc2V0IGNvbmZpZyhuZXdDb25maWc6IENhcm91c2VsQ29uZmlnKSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG5ldyBDYXJvdXNlbENvbmZpZyhuZXdDb25maWcpO1xuICAgICAgICB0aGlzLmNhcm91c2VsLnNldENvbmZpZyhuZXdDb25maWcpO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKSBpdGVtSW5kZXhDaGFuZ2UgPSB0aGlzLmNhcm91c2VsLmNhcm91c2VsU3RhdGVDaGFuZ2VzKClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHN0YXRlOiBDYXJvdXNlbFN0YXRlKSA9PiBzdGF0ZS5hY3RpdmVJdGVtSW5kZXgpLFxuICAgICAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY2Fyb3VzZWw6IENhcm91c2VsU2VydmljZSxcbiAgICApIHtcbiAgICB9XG5cbiAgICBuZXh0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhcm91c2VsLm5leHQoKTtcbiAgICB9XG5cbiAgICBwcmV2KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNhcm91c2VsLnByZXYoKTtcbiAgICB9XG5cbiAgICBzZXRJbmRleChuZXdJbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2Fyb3VzZWwuc2V0SXRlbUluZGV4KG5ld0luZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9ncmFtbWF0aWNhbHkgcmVjYWxjdWxhdGVzIGNhcm91c2VsIHBvc2l0aW9uIGluIGNhc2Ugb2ZcbiAgICAgKiBjb250YWluZXIgc2l6ZSBjaGFuZ2VzIG9yIG90aGVyIHNpemUgaW50ZXJhY3Rpb25zXG4gICAgICovXG4gICAgcmVjYWxjdWxhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2Fyb3VzZWwucmVjYWxjdWxhdGUoKTtcbiAgICB9XG5cbn1cbiJdfQ==