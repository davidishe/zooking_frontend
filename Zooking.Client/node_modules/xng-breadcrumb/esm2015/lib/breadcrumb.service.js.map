{"version":3,"file":"breadcrumb.service.js","sources":["../../../../../../../../../../u0v000i/Desktop/code/temp/xng-breadcrumb/libs/xng-breadcrumb/src/lib/breadcrumb.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport { Breadcrumb } from './types/breadcrumb';\nimport {\n  BreadcrumbObject,\n  BreadcrumbFunction,\n} from './types/breadcrumb.config';\n\ntype BreadcrumbConfig = BreadcrumbObject | BreadcrumbFunction | string;\ntype StoreMatcherKey = 'routeLink' | 'routeRegex' | 'alias';\ntype BreadcrumbDefinition = Breadcrumb & BreadcrumbObject;\nconst PATH_PARAM = {\n  PREFIX: ':',\n  REGEX_IDENTIFIER: '/:[^/]+',\n  REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbService {\n  private baseHref = '/';\n\n  /**\n   * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n   * Breadcrumbs can be set from anywhere (component, service) in the app.\n   * On every breadcrumb update check this store and use the info if available.\n   */\n  private dynamicBreadcrumbStore: BreadcrumbDefinition[] = [];\n\n  /**\n   * breadcrumbList for the current route\n   * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n   * If effected, update the change and emit a new stream\n   */\n  private currentBreadcrumbs: BreadcrumbDefinition[] = [];\n  private previousBreadcrumbs: BreadcrumbDefinition[] = [];\n\n  /**\n   * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n   * Emits on every route change OR dynamic update of breadcrumb\n   */\n  private breadcrumbs = new BehaviorSubject<BreadcrumbDefinition[]>([]);\n  public breadcrumbs$ = this.breadcrumbs.asObservable();\n\n  constructor(private activatedRoute: ActivatedRoute, private router: Router) {\n    this.detectRouteChanges();\n  }\n\n  /**\n   * Whenever route changes build breadcrumb list again\n   */\n  private detectRouteChanges() {\n    this.router.events\n      .pipe(\n        filter((event) => event instanceof NavigationEnd),\n        distinctUntilChanged()\n      )\n      .subscribe(() => {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(this.activatedRoute.root, this.baseHref);\n      });\n  }\n\n  private getRootBreadcrumb() {\n    const rootConfig = this.router.config.find((config) => config.path === '');\n    const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n    const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n\n    if (rootBreadcrumb || storeItem) {\n      return {\n        ...storeItem,\n        ...rootBreadcrumb,\n        routeLink: this.baseHref,\n        ...this.getQueryParamsFromPreviousList('/'),\n      };\n    }\n  }\n\n  private prepareBreadcrumbItem(\n    activatedRoute: ActivatedRoute,\n    routeLinkPrefix: string\n  ): BreadcrumbDefinition {\n    const { path, breadcrumb } = this.parseRouteData(\n      activatedRoute.routeConfig\n    );\n    const resolvedSegment = this.resolvePathSegment(path, activatedRoute);\n    const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n    const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n\n    const label = this.extractLabel(\n      storeItem?.label || breadcrumb?.label,\n      resolvedSegment\n    );\n    let isAutoGeneratedLabel = false;\n    let autoGeneratedLabel = '';\n    if (!label) {\n      isAutoGeneratedLabel = true;\n      autoGeneratedLabel = resolvedSegment;\n    }\n\n    return {\n      ...storeItem,\n      ...breadcrumb,\n      label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n      routeLink,\n      isAutoGeneratedLabel,\n      ...this.getQueryParamsFromPreviousList(routeLink),\n    };\n  }\n\n  private prepareBreadcrumbList(\n    activatedRoute: ActivatedRoute,\n    routeLinkPrefix: string\n  ): Breadcrumb[] {\n    if (activatedRoute.routeConfig && activatedRoute.routeConfig.path) {\n      const breadcrumbItem = this.prepareBreadcrumbItem(\n        activatedRoute,\n        routeLinkPrefix\n      );\n      this.currentBreadcrumbs.push(breadcrumbItem);\n\n      if (activatedRoute.firstChild) {\n        return this.prepareBreadcrumbList(\n          activatedRoute.firstChild,\n          breadcrumbItem.routeLink + '/'\n        );\n      }\n    } else if (activatedRoute.firstChild) {\n      return this.prepareBreadcrumbList(\n        activatedRoute.firstChild,\n        routeLinkPrefix\n      );\n    }\n    const lastCrumb = this.currentBreadcrumbs[\n      this.currentBreadcrumbs.length - 1\n    ];\n    this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRoute);\n\n    // remove breadcrumb items that needs to be hidden\n    const breadcrumbsToShow = this.currentBreadcrumbs.filter(\n      (item) => !item.skip\n    );\n\n    this.breadcrumbs.next(breadcrumbsToShow);\n  }\n\n  private getFromStore(alias: string, routeLink: string): BreadcrumbDefinition {\n    return this.dynamicBreadcrumbStore.find((item) => {\n      return (\n        (alias && alias === item.alias) ||\n        (routeLink && routeLink === item.routeLink) ||\n        this.matchRegex(routeLink, item.routeRegex)\n      );\n    });\n  }\n\n  /**\n   * use exact match instead of regexp.test\n   * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n   */\n  private matchRegex(routeLink: string, routeRegex: string) {\n    const match = routeLink.match(new RegExp(routeRegex));\n    return match && match[0] === routeLink;\n  }\n\n  /**\n   * if the path segment has route params, read the param value from url\n   * for each segment of route this gets called\n   *\n   * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n   */\n  private resolvePathSegment(segment: string, activatedRoute: ActivatedRoute) {\n    //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n    if (segment.includes(PATH_PARAM.PREFIX)) {\n      Object.entries(activatedRoute.snapshot.params).forEach(([key, value]) => {\n        segment = segment.replace(`:${key}`, `${value}`);\n      });\n    }\n    return segment;\n  }\n\n  /**\n   * queryParams & fragments for previous breadcrumb path are copied over to new list\n   */\n  private getQueryParamsFromPreviousList(routeLink: string): Breadcrumb {\n    const { queryParams, fragment } =\n      this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n      {};\n    return { queryParams, fragment };\n  }\n\n  /**\n   * set current activated route query params to the last breadcrumb item\n   */\n  private setQueryParamsForActiveBreadcrumb(\n    lastItem: Breadcrumb,\n    activatedRoute: ActivatedRoute\n  ) {\n    if (lastItem) {\n      const { queryParams, fragment } = activatedRoute.snapshot;\n      lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n      lastItem.fragment = fragment;\n    }\n  }\n\n  /**\n   * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n   * When both are defined, child takes precedence\n   *\n   * Ex: Below we are setting breadcrumb on both parent and child.\n   * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n   * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: \"Defined On Module\"}}\n   *                                                AND\n   * children: [\n   *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n   * ]\n   */\n  private parseRouteData(routeConfig) {\n    const { path, data } = routeConfig;\n    const breadcrumb = this.mergeWithBaseChildData(\n      routeConfig,\n      data?.breadcrumb\n    );\n\n    return { path, breadcrumb };\n  }\n\n  /**\n   * get empty children of a module or Component. Empty child is the one with path: ''\n   * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n   */\n  private mergeWithBaseChildData(\n    routeConfig,\n    config: BreadcrumbConfig\n  ): BreadcrumbObject {\n    if (!routeConfig) {\n      return this.extractObject(config);\n    }\n\n    let baseChild;\n    if (routeConfig.loadChildren) {\n      // To handle a module with empty child route\n      baseChild = routeConfig._loadedConfig.routes.find(\n        (route) => route.path === ''\n      );\n    } else if (routeConfig.children) {\n      // To handle a component with empty child route\n      baseChild = routeConfig.children.find((route) => route.path === '');\n    }\n\n    const childConfig = baseChild?.data?.breadcrumb;\n    return childConfig\n      ? this.mergeWithBaseChildData(baseChild, {\n          ...this.extractObject(config),\n          ...this.extractObject(childConfig),\n        })\n      : this.extractObject(config);\n  }\n\n  /**\n   * Update breadcrumb dynamically\n   *\n   * key can be a path | alias\n   *\n   * 1) Using complete route path. route can be passed the same way you define angular routes\n   * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n   * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n   * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n   * ------------------------------------------ OR ------------------------------------------\n   * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n   * - update label Ex: set('@mentor', 'Enabler')\n   * - change visibility Ex: set('@mentorEdit', { skip: true })\n   *\n   *\n   * value can be string | BreadcrumbObject | BreadcrumbFunction\n   */\n  set(key: string, breadcrumb: string | BreadcrumbObject) {\n    const breadcrumbObject = this.extractObject(breadcrumb);\n    let updateArgs: [StoreMatcherKey, BreadcrumbDefinition];\n\n    if (key.startsWith(ALIAS_PREFIX)) {\n      updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n    } else if (key.includes(PATH_PARAM.PREFIX)) {\n      updateArgs = [\n        'routeRegex',\n        { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n      ];\n    } else {\n      updateArgs = [\n        'routeLink',\n        { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n      ];\n    }\n    this.updateStore(...updateArgs);\n    this.updateCurrentBreadcrumbs(...updateArgs);\n  }\n\n  /**\n   * Update the store to reuse for dynamic declarations\n   * If the store already has this route definition update it else add\n   */\n  private updateStore(key: string, breadcrumb: BreadcrumbDefinition) {\n    const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n      return breadcrumb[key] === item[key];\n    });\n    if (storeItemIndex > -1) {\n      this.dynamicBreadcrumbStore[storeItemIndex] = {\n        ...this.dynamicBreadcrumbStore[storeItemIndex],\n        ...breadcrumb,\n      };\n    } else {\n      this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n    }\n  }\n\n  /**\n   * If breadcrumb is present in current breadcrumbs update it and emit new stream\n   */\n  private updateCurrentBreadcrumbs(\n    key: string,\n    breadcrumb: BreadcrumbDefinition\n  ) {\n    const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n      return key === 'routeRegex'\n        ? this.matchRegex(item.routeLink, breadcrumb[key])\n        : breadcrumb[key] === item[key];\n    });\n    if (itemIndex > -1) {\n      this.currentBreadcrumbs[itemIndex] = {\n        ...this.currentBreadcrumbs[itemIndex],\n        ...breadcrumb,\n      };\n      const breadcrumbsToShow = this.currentBreadcrumbs.filter(\n        (item) => !item.skip\n      );\n      this.breadcrumbs.next([...breadcrumbsToShow]);\n    }\n  }\n\n  /**\n   * For a route with path param, we create regex dynamically from angular route syntax\n   * '/mentor/:id' becomes '/mentor/[^/]',\n   * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n   */\n  private buildRegex(path: string) {\n    return this.ensureLeadingSlash(path).replace(\n      new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'),\n      PATH_PARAM.REGEX_REPLACER\n    );\n  }\n\n  private ensureLeadingSlash(path: string) {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n\n  /**\n   * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n   *\n   * string: simple static breadcrumb label for a path\n   * function: callback that gets invoked with resolved path param\n   * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n   */\n  private extractLabel(config: BreadcrumbConfig, resolvedParam?: string) {\n    const label = typeof config === 'object' ? config.label : config;\n    if (typeof label === 'function') {\n      return label(resolvedParam);\n    }\n    return label;\n  }\n\n  private extractObject(config: BreadcrumbConfig): BreadcrumbObject {\n    // don't include {label} if config is undefined. This is important since we merge the configs\n    if (\n      config &&\n      (typeof config === 'string' || typeof config === 'function')\n    ) {\n      return { label: config };\n    }\n    return (config as BreadcrumbObject) || {};\n  }\n}\n"]}